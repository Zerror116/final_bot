import io
import re
import time
import telebot


from collections import defaultdict

from openpyxl.workbook import Workbook
from sqlalchemy import func
from bot import admin_main_menu, client_main_menu, worker_main_menu, unknown_main_menu, supreme_leader_main_menu
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputFile
from database.config import *
from telebot.apihelper import ApiTelegramException
from db.for_delivery import ForDelivery
from db.temp_reservations import TempReservations
from db.in_delivery import InDelivery
from handlers.black_list import *
from handlers.clients_manage import *
from handlers.posts_manage import *
from handlers.reservations_manage import *
from types import SimpleNamespace
from handlers.reservations_manage import calculate_total_sum, calculate_processed_sum


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –∫—ç—à
bot = telebot.TeleBot(TOKEN)
user_messages = {}
user_pages = {}
PAGE_SIZE = 5
user_last_message_id = {}
last_bot_message = {}
user_data = {}
user_states = {}
temp_user_data = {}
temp_post_data = {}
last_start_time = {}
delivery_active = False


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState:
    NEUTRAL = None
    STARTED_REGISTRATION = 0
    REGISTERING_NAME = 1
    REGISTERING_PHONE = 2
    CREATING_POST = 3
    EDITING_POST = 4
    EDITING_POST_PRICE = 5
    EDITING_POST_DESCRIPTION = 6
    EDITING_POST_QUANTITY = 7
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def save_reservation(user_id, post_id, quantity=1, is_fulfilled=False):
    try:
        Reservations.insert(
            user_id=user_id,
            quantity=quantity,
            post_id=post_id,
            is_fulfilled=is_fulfilled,
        )
        return True, "–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: {e}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
@bot.message_handler(commands=["unsent_posts"])
def list_unsent_posts(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role not in ["admin", "worker", "supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    try:
        unsent_posts = Posts.get_unsent_posts()
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if unsent_posts:
        response = "üìÆ –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
        for post in unsent_posts:
            post_id, price, description, quantity = post
            response += f"ID: {post_id} | –¶–µ–Ω–∞: {price} ‚ÇΩ | –û–ø–∏—Å–∞–Ω–∏–µ: {description} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, "‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = get_client_role(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    greetings = {
        "client": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "worker": "–î–∞–≤–∞–π –∑–∞ —Ä–∞–±–æ—Ç—É!",
        "supreme_leader": "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
        "admin": "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    }
    greeting = greetings.get(role, "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—à—É –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")


    inline_markup = InlineKeyboardMarkup()
    inline_markup.add(InlineKeyboardButton("–í –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=support_link))
    inline_markup.add(InlineKeyboardButton("–ù–∞ –∫–∞–Ω–∞–ª", url=channel_link))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role == "admin":
        reply_markup = admin_main_menu()
    elif role == "client":
        reply_markup = client_main_menu()
    elif role == "worker":
        reply_markup = worker_main_menu()
    elif role == "supreme_leader":
        reply_markup = supreme_leader_main_menu()
    else:
        reply_markup = unknown_main_menu()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if user_id in last_bot_message:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
            bot.delete_message(
                chat_id=user_id, message_id=last_bot_message[user_id]["greeting"]
            )
        except Exception as e:
            print(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {e}"
            )
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
            bot.delete_message(
                chat_id=user_id, message_id=last_bot_message[user_id].get("resources")
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    try:
        sent_greeting = bot.send_message(user_id, greeting, reply_markup=reply_markup)

        # –ï—Å–ª–∏ —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
        if role == "client":
            sent_resources = bot.send_message(
                user_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=inline_markup
            )
        else:
            sent_resources = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        last_bot_message[user_id] = {
            "greeting": sent_greeting.message_id,
            "resources": sent_resources.message_id if sent_resources else None,
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞ /start)
    try:
        bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {e}")

# –•—ç–Ω–¥–ª–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def handle_registration(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if is_user_blacklisted(chat_id):
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if Clients.get_row_by_user_id(chat_id):
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        handle_start(message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
    set_user_state(chat_id, UserState.REGISTERING_NAME)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –ò–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_NAME)
def handle_name_registration(message):
    chat_id = message.chat.id
    user_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if len(user_name) < 2:
        bot.send_message(chat_id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id not in temp_user_data:
        temp_user_data[chat_id] = {}
    temp_user_data[chat_id]["name"] = user_name

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞
    set_user_state(chat_id, UserState.STARTED_REGISTRATION)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –ù–æ–º–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.STARTED_REGISTRATION)
def handle_phone_registration(message):
    chat_id = message.chat.id
    raw_phone = message.text.strip()
    cleaned_phone = re.sub(r"\D", "", raw_phone)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    if is_phone_valid(cleaned_phone):
        if cleaned_phone.startswith("7"):
            cleaned_phone = "8" + cleaned_phone[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ
        existing_client = Clients.get_row_by_phone(cleaned_phone)
        if existing_client:
            # –ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {cleaned_phone} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É? "
                "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞.",
                reply_markup=create_yes_no_keyboard()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if chat_id not in temp_user_data:
                temp_user_data[chat_id] = {}
            temp_user_data[chat_id]["phone"] = cleaned_phone
            set_user_state(chat_id, UserState.REGISTERING_PHONE)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            complete_registration(chat_id, cleaned_phone)
    else:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, +7XXXXXXXXXX")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_phone_valid(phone):
    pattern = r"^(8|7|\+7)\d{10}$"
    return re.match(pattern, phone) is not None

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_PHONE)
def confirm_phone_registration(message):
    chat_id = message.chat.id
    response = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id not in temp_user_data or "phone" not in temp_user_data[chat_id]:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        clear_user_state(chat_id)
        return

    new_phone = temp_user_data[chat_id]["phone"]
    user_name = temp_user_data[chat_id].get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–º—è

    if response == "–¥–∞":
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞
        existing_client = Clients.get_row_by_phone(new_phone)
        if existing_client:
            bot.send_message(
                existing_client.user_id,
                f"‚ö†Ô∏è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ({new_phone}) –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. "
                "–ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–∑–≤–∞–ª–æ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        complete_registration(chat_id, new_phone)

    elif response == "–Ω–µ—Ç":
        bot.send_message(chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
        set_user_state(chat_id, UserState.STARTED_REGISTRATION)  # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
    else:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *'–î–∞'* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *'–ù–µ—Ç'* –¥–ª—è –æ—Ç–∫–∞–∑–∞.",
            parse_mode="Markdown"
        )

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def complete_registration(chat_id, phone):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = temp_user_data.get(chat_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")  # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º user_id
        role = "supreme_leader" if chat_id == ADMIN_USER_ID else "client"

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º user_id
        existing_user = Clients.get_row_by_user_id(chat_id)

        if existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            success, message = Clients.update_row(
                user_id=chat_id,
                name=name,
                phone=phone,
                role=role  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
            )

            if success:
                print(f"[DEBUG]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {message}")
            else:
                print(f"[DEBUG]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {message}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            Clients.insert(
                user_id=chat_id,
                name=name,
                phone=phone,
                role=role  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
            )
        # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clear_user_state(chat_id)

        # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        bot.send_message(
            chat_id,
            f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º: {phone}",
            reply_markup=types.ReplyKeyboardRemove()
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è start
        handle_start(SimpleNamespace(chat=SimpleNamespace(id=chat_id), message_id=None))
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[ERROR]: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞ –∏–ª–∏ –Ω–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
def create_yes_no_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
    return markup

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(phone: str) -> bool:
    try:
        with Session(bind=engine) as session:
            # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            return session.query(Clients).filter(Clients.phone == phone).first() is not None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("reserve_"))
def handle_reservation(call):
    post_id = int(call.data.split("_", 1)[1])
    user_id = call.from_user.id

    if is_user_blacklisted(user_id):
        return "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_registered(user_id):
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞",
            show_alert=True,
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
    post = Posts.get_row_by_id(post_id)
    if not post:  # –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ get_row_by_id –≤–µ—Ä–Ω—É–ª None
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ get_row_by_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é
    current_quantity = post.quantity
    message_id = post.message_id
    price = post.price
    description = post.description

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    if current_quantity == 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        with Session(bind=engine) as session:
            user_in_queue = session.query(TempReservations).filter(
                TempReservations.user_id == user_id,
                TempReservations.post_id == post_id,
                TempReservations.temp_fulfilled == False
            ).first()

            if user_in_queue:
                bot.answer_callback_query(
                    callback_query_id=call.id,
                    text="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º!",
                    show_alert=True,
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –Ω–µ —Å—Ç–æ–∏—Ç
            TempReservations.insert(
                user_id=user_id,
                quantity=1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                post_id=post_id,
                temp_fulfilled=False,
            )
            bot.answer_callback_query(
                callback_query_id=call.id,
                text="–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.",
                show_alert=True,
            )
        return

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.answer_callback_query(
        callback_query_id=call.id,
        text="–í–∞—à —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.",
        show_alert=False,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    Reservations.insert(user_id=user_id, quantity=1, post_id=post_id, is_fulfilled=False)

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1
    new_quantity = current_quantity - 1
    update_status, message = Posts.update_row(
        post_id=post_id, price=price, description=description, quantity=new_quantity
    )
    if not update_status:
        bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ: {message}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    new_caption = (
        f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Å—Ç–∞—Ç–æ–∫: {new_quantity}"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    try:
        bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=message_id,
            caption=new_caption,
            reply_markup=call.message.reply_markup,  # –ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
        )
    except Exception as e:
        bot.send_message(
            user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ. –û—à–∏–±–∫–∞: {e}"
        )

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if new_quantity == 0:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–≤–∞—Ä–∞!",
            show_alert=True,
        )
    else:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            show_alert=False,
        )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_reservations(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reservations = Reservations.get_row_all(user_id)
    if not reservations:
        return []

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    for reservation in reservations:
        post_id = reservation.post_id
        print(f"Checking post_id: {post_id}")  # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥ post_id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        post = Posts.get_row_by_id(post_id)
        if not post:
            print(f"Post not found for post_id: {post_id}")  # –û—Ç–ª–∞–¥–∫–∞: –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.append({
            "description": post.description,
            "price": post.price,
            "photo": post.photo,
            "quantity": reservation.quantity,
            "is_fulfilled": reservation.is_fulfilled
        })

    print(f"Final results: {results}")  # –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ
    return results

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∏—Ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=["my_reservations"])
def show_reservations(message):
    user_id = message.chat.id
    query = Clients.get_row(user_id=user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # if not is_registered(user_id):
    if query is None:
        msg = bot.send_message(
            user_id,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start register.",
        )
        user_messages[user_id] = [msg.message_id]
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reservations = get_user_reservations(user_id)

    if reservations:
        for idx, (description, price, photo, quantity, is_fulfilled) in enumerate(
            reservations, start=1
        ):
            status = "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–æ" if is_fulfilled else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = (
                f"{idx}. –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ x {quantity}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )

            if photo:
                try:
                    sent_photo = bot.send_photo(user_id, photo=photo, caption=caption)
                    user_messages.setdefault(user_id, []).append(sent_photo.message_id)
                except Exception as e:
                    bot.send_message(
                        user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}"
                    )  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–∫–∞–∑
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def order_details(call):
    reservation_id = int(call.data.split("_")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ ORM
        order = Reservations.get_row_by_id(reservation_id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º
        post = Posts.get_row_by_id(order.post_id)
        if not post:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if order.is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        caption = f"–¶–µ–Ω–∞: {post.price} ‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {post.description}\n–°—Ç–∞—Ç—É—Å: {status}"
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup()
        back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders")
        markup.add(back_btn)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if not order.is_fulfilled:
            cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"cancel_{reservation_id}")
            markup.add(cancel_btn)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        bot.edit_message_media(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            media=InputMediaPhoto(media=post.photo, caption=caption),
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "my_orders")
def show_my_orders(call):
    message = call.message
    my_orders(message)  # –í—ã–∑—ã–≤–∞–µ–º my_orders, –ø–µ—Ä–µ–¥–∞—ë–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ú–æ–∏ –∑–∞–∫–∞–∑—ã
@bot.message_handler(func=lambda message: message.text == "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    user_id = message.chat.id
    message_id = message.message_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(row_width=1)

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        last_message_id = user_last_message_id.get(user_id)
        if last_message_id:
            try:
                bot.delete_message(chat_id=user_id, message_id=last_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ ORM
        orders = Reservations.get_row_by_user_id(user_id)

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if orders:
            user_pages[user_id] = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
            new_message = send_order_page(user_id=user_id, message_id=None, orders=orders, page=user_pages[user_id])
            user_last_message_id[user_id] = new_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            keyboard.add(InlineKeyboardButton(text="–ù–∞ –∫–∞–Ω–∞–ª", url="https://t.me/MegaSkidkiTg"))
            new_message = bot.send_message(
                chat_id=user_id,
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
                reply_markup=keyboard,
            )
            user_last_message_id[user_id] = new_message.message_id
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã': {ex}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ üöó –ó–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
@bot.message_handler(func=lambda message: message.text == "üöó –ó–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ")
def show_delivery_orders(message):
    user_id = message.chat.id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        delivery_orders = InDelivery.get_all_rows()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã
        user_orders = [order for order in delivery_orders if order.user_id == user_id]  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ user_id

        # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
        if not user_orders:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        text = "üöö –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\n"
        total_sum = 0
        for order in user_orders:
            text += f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {order.item_description}\n"
            text += f"üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}\n"
            text += f"üíµ –°—É–º–º–∞: {order.total_sum} ‚ÇΩ\n"
            text += "-" * 30 + "\n"
            total_sum += order.total_sum

        text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ: {total_sum} ‚ÇΩ"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {str(e)}"
        )

def confirm_delivery():
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ in_delivery.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
        for_delivery_rows = ForDelivery.get_all_rows()

        for row in for_delivery_rows:
            user_id = row.user_id

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reservations = Reservations.get_row_by_user_id(user_id)
            fulfilled_orders = [r for r in reservations if r.is_fulfilled]

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ in_delivery
            for order in fulfilled_orders:
                InDelivery.insert(
                    user_id=row.user_id,
                    item_description="–¢–æ–≤–∞—Ä",  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑ Posts
                    quantity=order.quantity,
                    total_sum=row.total_sum,
                    delivery_address=row.address
                )

            # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ for_delivery
            ForDelivery.delete_all_rows()

        print("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ in_delivery.")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")



# –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
def send_order_page(user_id, message_id, orders, page):
    orders_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * orders_per_page
    end = start + orders_per_page
    total_pages = (len(orders) - 1) // orders_per_page + 1
    selected_orders = orders[start:end]

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    total_sum = sum(
        Posts.get_row_by_id(order.post_id).price for order in orders if Posts.get_row_by_id(order.post_id)
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ö–æ–ª–æ–Ω–∫–∏: –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    text = f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for order in selected_orders:
        post = Posts.get_row_by_id(order.post_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ORM
        if post:
            status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if order.is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            keyboard.add(InlineKeyboardButton(
                text=f"{post.price} ‚ÇΩ - {post.description} ({status})",
                callback_data=f"order_{order.id}"
            ))

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–æ–≤
    text += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_sum} ‚ÇΩ\n"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if page > 0:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_page_{page - 1}"))
    if end < len(orders):
        keyboard.add(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"orders_page_{page + 1}"))

    # –§–æ—Ç–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    photo_path = "images/my_cart.jpg"
    with open(photo_path, "rb") as photo:
        if message_id:
            return bot.edit_message_media(
                chat_id=user_id,
                message_id=message_id,
                media=InputMediaPhoto(photo, caption=text),
                reply_markup=keyboard
            )
        else:
            return bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=text,
                reply_markup=keyboard
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("orders_page_"))
def paginate_orders(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    page = int(call.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = Reservations.get_row_by_user_id(user_id=user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    try:
        new_message = send_order_page(user_id=user_id, message_id=message_id, orders=orders, page=page)
        user_last_message_id[user_id] = new_message.message_id  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
    finally:
        bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_"))
def cancel_reservation(call):
    reservation_id = int(call.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id  # –ë–µ—Ä—ë–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ ORM
        order = Reservations.get_row_by_id(reservation_id)
        if not order or order.user_id != user_id:
            bot.answer_callback_query(call.id, "–†–µ–∑–µ—Ä–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if order.is_fulfilled:
            bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        post = Posts.get_row_by_id(order.post_id)
        if not post:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ Reservations
        success = Reservations.cancel_order_by_id(reservation_id)
        if not success:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        with Session(bind=engine) as session:
            next_in_queue = session.query(TempReservations).filter(
                TempReservations.post_id == order.post_id,
                TempReservations.temp_fulfilled == False
            ).order_by(TempReservations.created_at).first()  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏

            if next_in_queue:
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                Reservations.insert(
                    user_id=next_in_queue.user_id,
                    post_id=order.post_id,
                    quantity=1,
                    is_fulfilled=False
                )

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                next_in_queue.temp_fulfilled = True
                session.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                bot.send_message(
                    chat_id=next_in_queue.user_id,
                    text="–í–∞—à —Ç–æ–≤–∞—Ä –≤ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É."
                )

                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ
                bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–æ–≤–∞—Ä–∞. –û–Ω –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–µ–¥—É—é—â–µ–º—É –≤ –æ—á–µ—Ä–µ–¥–∏.",
                                          show_alert=False)
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
                my_orders(call.message)
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–≤–∞—Ä –≤–µ—Ä–Ω—ë—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª)
        Posts.increment_quantity_by_id(order.post_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ –≥—Ä—É–ø–ø–µ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ post.message_id)
        if post.message_id:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–æ–≤–∞—Ä–æ–º
            try:
                bot.delete_message(chat_id=TARGET_GROUP_ID, message_id=post.message_id)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {post.message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã {TARGET_GROUP_ID}.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ, —É–≤–µ–ª–∏—á–∏–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if post.message_id:  # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω message_id –ø–æ—Å—Ç–∞
            new_quantity = post.quantity + 1  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            updated_caption = (
                f"–¶–µ–Ω–∞: {post.price} ‚ÇΩ\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {post.description}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {new_quantity}"
            )
            markup = InlineKeyboardMarkup()
            reserve_button = InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{post.id}")
            to_bot_button = InlineKeyboardButton("–í –ë–æ—Ç–∞", url="https://t.me/MegaSkidkiTgBot?start=start")
            markup.add(reserve_button, to_bot_button)

            try:
                bot.edit_message_caption(
                    chat_id=CHANNEL_ID,
                    message_id=post.message_id,
                    caption=updated_caption,
                    reply_markup=markup,
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
        bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–æ–≤–∞—Ä–∞.", show_alert=False)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
        my_orders(call.message)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("enqueue_"))
def handle_enqueue(call):
    user_id = call.message.chat.id
    post_id = int(call.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –≤ TempReservations
    with Session(bind=engine) as session:
        existing_entry = session.query(TempReservations).filter(
            TempReservations.user_id == user_id,
            TempReservations.post_id == post_id,
            TempReservations.temp_fulfilled == False
        ).first()

        if existing_entry:
            return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É TempReservations
    TempReservations.insert(user_id=user_id, quantity=1, post_id=post_id, temp_fulfilled=False)
    bot.send_message(user_id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def go_back_to_menu(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç.")

# –ü–µ—Ä–µ—Å—Å—ã–ª–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≥—Ä—É–ø–ø—É –ë—Ä–æ–Ω–∏ –ú–µ–≥–∞ –°–∫–∏–¥–∫–∏
@bot.message_handler(func=lambda message: message.text == "üì¶ –ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
def send_all_reserved_to_group(message):
    user_id = message.chat.id
    role = get_client_role(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    if role not in ["supreme_leader", "admin"]:
        bot.send_message(user_id, f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –í–∞—à–∞ —Ä–æ–ª—å: {role}")
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
        reservations = Reservations.get_row_all()
        if not reservations:
            bot.send_message(user_id, "–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        reservations_to_send = [r for r in reservations if not r.is_fulfilled]
        if not reservations_to_send:
            bot.send_message(user_id, "–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ user_id –∏ post_id, —Å—É–º–º–∏—Ä—É—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        grouped_orders = defaultdict(lambda: {"quantity": 0, "reservations": []})
        for reservation in reservations_to_send:
            key = (reservation.user_id, reservation.post_id)
            grouped_orders[key]["quantity"] += reservation.quantity
            grouped_orders[key]["reservations"].append(reservation)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        for (user_id, post_id), group in grouped_orders.items():
            try:
                quantity = group["quantity"]
                reservations = group["reservations"]

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–µ
                post_data = Posts.get_row(post_id)
                if not post_data:
                    bot.send_message(
                        user_id, f"‚ö†Ô∏è –ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ
                client_data = Clients.get_row(user_id)
                if not client_data:
                    bot.send_message(
                        user_id, f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                caption = (
                    f"üíº –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_data.name or '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client_data.phone or '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üí∞ –¶–µ–Ω–∞: {post_data.price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}‚ÇΩ\n"
                    f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ: {post_data.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                    f"üìÖ –î–∞—Ç–∞: {post_data.created_at.strftime('%d.%m') if post_data.created_at else '–î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                    f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
                markup = InlineKeyboardMarkup()
                mark_button = InlineKeyboardButton(
                    text=f"‚úÖ –ü–æ–ª–æ–∂–∏–ª {quantity} —à—Ç.",
                    callback_data=f"mark_fulfilled_group_{user_id}_{post_id}",
                )
                markup.add(mark_button)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if post_data.photo:
                    bot.send_photo(
                        chat_id=TARGET_GROUP_ID,
                        photo=post_data.photo,
                        caption=caption,
                        reply_markup=markup,
                    )
                else:
                    bot.send_message(
                        chat_id=TARGET_GROUP_ID, text=caption, reply_markup=markup
                    )


            except Exception as e:
                bot.send_message(
                    user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")



    except Exception as global_error:
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {global_error}")
        print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_all_reserved_to_group: {global_error}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled_group_"))
def mark_fulfilled_group(call):
    user_id = call.from_user.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if role not in ["admin", "supreme_leader"]:
        bot.answer_callback_query(
            call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True
        )
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
        _, target_user_id, post_id = call.data.split("_")[2:]
        target_user_id = int(target_user_id)
        post_id = int(post_id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        with Session(bind=engine) as session:
            reservations = (
                session.query(Reservations)
                .filter_by(user_id=target_user_id, post_id=post_id, is_fulfilled=False)
                .all()
            )
            if not reservations:
                bot.answer_callback_query(
                    call.id, "–†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.", show_alert=True)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            for reservation in reservations:
                reservation.is_fulfilled = True
                session.merge(reservation)
            session.commit()

        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        user_first_name = call.from_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        user_username = call.from_user.username
        user_full_name = (
            f"{user_first_name} (@{user_username})"
            if user_username
            else user_first_name
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        updated_text = (
            f"{call.message.caption or call.message.text}\n\n"
            f"‚úÖ –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
            f"üë§ –ö—Ç–æ –ø–æ–ª–æ–∂–∏–ª: {user_full_name}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        if call.message.photo:
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=updated_text,
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=updated_text,
            )

        bot.answer_callback_query(call.id, "–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
        # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
        time.sleep(4)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ mark_fulfilled_group: {e}")

# –•–µ—Ä–Ω—è —á—Ç–æ–±—ã –Ω–µ –º–æ–≥–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤ –ø–∞–∫–µ—Ç–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled_"))
def mark_fulfilled(call):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = call.from_user.id
    role = get_client_role(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if role not in ["admin", "supreme_leader"]:
        bot.answer_callback_query(
            call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏ –∏–∑ callback_data
        reservation_id = int(call.data.split("_")[2])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        reservation = Reservations.get_row_by_id(reservation_id)
        if not reservation:
            bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ
        if reservation.is_fulfilled:
            bot.answer_callback_query(
                call.id, "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.", show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ç–æ –ø–æ–ª–æ–∂–∏–ª)
        user_first_name = call.from_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        user_username = call.from_user.username
        user_who = (
            f"{user_first_name} (@{user_username})"
            if user_username
            else user_first_name
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏
        with Session(bind=engine) as session:
            reservation.is_fulfilled = True
            session.merge(reservation)
            session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
            remaining_reservations = (
                session.query(Reservations).filter_by(is_fulfilled=False).count()
            )

        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if remaining_reservations == 0:
            bot.delete_message(
                chat_id=call.message.chat.id, message_id=call.message.message_id
            )
            bot.answer_callback_query(
                call.id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        original_caption = (
            call.message.caption or call.message.text
        )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        updated_caption = (
            f"{original_caption}\n\n"
            f"‚úÖ –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
            f"üë§ –ö—Ç–æ –ø–æ–ª–æ–∂–∏–ª: {user_who}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (caption –∏–ª–∏ text)
        if call.message.photo:
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=updated_caption,
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=updated_caption,
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ–ª–æ–∂–µ–Ω
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π!")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ mark_fulfilled: {e}")

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –≥—Ä—É–ø–ø—ã –∏ –±–æ—Ç–∞
@bot.message_handler(commands=["sync_posts"])
def sync_posts_with_channel(message):
    role = get_client_role(message.chat.id)
    user_id = message.chat.id
    if role not in ["admin","supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Posts
    posts = Posts.get_row_all()  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    deleted_posts = []

    for post in posts:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `post` –æ–±—ä–µ–∫—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        post_id = post.id  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ `post` ‚Äì –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        message_id = post.message_id  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å `message_id`

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.forward_message(
                chat_id=message.chat.id,
                from_chat_id=CHANNEL_ID,
                message_id=message_id
            )
        except ApiTelegramException:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_posts.append(post_id)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
    for post_id in deleted_posts:
        Posts.delete_row(post_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏

    bot.send_message(
        message.chat.id,
        f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(deleted_posts)}.",
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("clear_cart_"))
def clear_cart(call):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    client_id = int(call.data.split("_")[2])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_row, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
    client = Clients.get_row("clients", {"id": client_id})

    if not client:
        bot.send_message(call.message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id = client["user_id"]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_row –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ reservations
    Reservations.update_row("reservations", {"user_id": user_id},
               {"deleted": True})  # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–µ deleted –≤ True

    bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é(—Å—Ç—ç–π—Ç—ã —Å—Ç–∞—Ç—É—Å–∞)
def is_registered(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ clients.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ get_row –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    client = Clients.get_row(user_id=user_id)
    return client is not None
def set_user_state(user_id, state):
    user_states[user_id] = state
    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {state}")
def get_user_state(chat_id):
    state = user_states.get(chat_id, None)

    return state
def clear_user_state(user_id):
    if user_id in user_states:  # user_states, –≤–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        del user_states[user_id]
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ö–ª–∏–µ–Ω—Ç—ã"
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ö–ª–∏–µ–Ω—Ç—ã")
def manage_clients(message):
    user_id = message.chat.id
    role = get_client_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin","supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
def request_phone_last_digits(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
    )
    set_user_state(message.chat.id, "AWAITING_PHONE_LAST_4")


# @bot.message_handler(func=lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "AWAITING_PHONE_LAST_4")
def handle_phone_input(message):
    input_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not input_text.isdigit() or len(input_text) != 4:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (4 —Ü–∏—Ñ—Ä—ã).",
        )
        return

    # –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    show_cart_by_last_phone_digits(message, input_text)


def show_cart_by_last_phone_digits(message, last_4_digits):
    client = Clients.get_row_by_phone_digits(last_4_digits)

    if not client:
        bot.send_message(
            message.chat.id,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        )
        clear_user_state(message.chat.id)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    total_orders = calculate_total_sum(client.user_id)
    processed_orders = calculate_processed_sum(client.user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –µ–≥–æ –∑–∞–∫–∞–∑–∞—Ö
    bot.send_message(
        message.chat.id,
        f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {client.name}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_orders} —Ä—É–±.\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {processed_orders} —Ä—É–±.",
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    reservations = Reservations.get_row_by_user_id(client.user_id)

    if not reservations:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞.")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å"
        send_cart_content(message.chat.id, reservations, client.user_id)

    clear_user_state(message.chat.id)


def send_cart_content(chat_id, reservations, user_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    for reservation in reservations:
        post = Posts.get_row_by_id(reservation.post_id)

        if post:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            if post.photo:
                bot.send_photo(
                    chat_id,
                    photo=post.photo,
                    caption=(
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {post.description}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {reservation.quantity}\n"
                        f"–°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if reservation.is_fulfilled else '–í –æ–∂–∏–¥–∞–Ω–∏–∏'}"
                    ),
                )
            else:
                bot.send_message(
                    chat_id,
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {post.description}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {reservation.quantity}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if reservation.is_fulfilled else '–í –æ–∂–∏–¥–∞–Ω–∏–∏'}",
                )
        else:
            bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä —Å ID {reservation.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ", callback_data=f"clear_processed_{user_id}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"
@bot.callback_query_handler(func=lambda call: call.data.startswith("clear_processed_"))
def handle_clear_processed(call):
    user_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleared_items = clear_processed(user_id)

    if cleared_items > 0:
        bot.send_message(call.message.chat.id,
                         f"–í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cleared_items}) –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        bot.send_message(call.message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


def clear_processed(user_id):
    """–£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reservations = Reservations.get_row_by_user_id(user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ) —Ç–æ–≤–∞—Ä—ã
    processed_items = [item for item in reservations if item.is_fulfilled]

    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
    for item in processed_items:
        Reservations.delete_row(item.id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    return len(processed_items)


# Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("view_cart_"))
def callback_view_cart(call):
    client_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = Clients.get_row(client_id)

    if not client:
        bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—å—é –∫–æ—Ä–∑–∏–Ω—É –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å
    bot.send_message(call.message.chat.id, f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {client.name}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    reservations = Reservations.get_row_by_user_id(client.user_id)

    if not reservations:
        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞.")
    else:
        send_cart_content(call.message.chat.id, reservations)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def delete_client_by_phone(message):
    user_id = message.chat.id
    role = get_client_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin","supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    set_user_state(message.chat.id, "DELETE_CLIENT_PHONE")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "DELETE_CLIENT_PHONE")
def process_delete_client_phone(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role not in ["admin","supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    phone = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = Clients.get_row_by_phone(phone)

        if client:
            client_user_id = client.user_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if client_user_id == protected_user_id:
                bot.send_message(
                    user_id, f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –∑–∞—â–∏—â–µ–Ω –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è."
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω)
            if client_user_id != protected_user_id:
                BlackList.insert(user_id=client_user_id, phone=phone)

            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã reservations
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            with Session(bind=engine) as session:
                deleted_reservations_count = session.query(Reservations).filter(
                    Reservations.user_id == client_user_id
                ).delete()
                session.commit()

            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
            Clients.delete_row(client.id)

            bot.send_message(
                user_id,
                f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. "
                f"–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ reservations —É–¥–∞–ª–µ–Ω–æ: {deleted_reservations_count}.",
            )
        else:
            bot.send_message(user_id, f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        clear_user_state(user_id)

# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_worker_") or call.data.startswith("set_client_"))
def handle_set_role(call):
    client_id = int(call.data.split("_")[2])
    new_role = "worker" if "set_worker" in call.data else "client"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID (–∏—Å–ø–æ–ª—å–∑—É–µ–º get_row)
    client = Clients.get_row("clients", {"id": client_id})

    if not client:
        bot.answer_callback_query(call.id, f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º update_row)
    update_result = Clients.update_row("clients", {"role": new_role}, {"id": client_id})

    if update_result:
        bot.answer_callback_query(call.id, f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
        bot.send_message(
            call.message.chat.id,
            f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {client_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}.",
        )
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    role = get_client_role(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –∏–∑ Clients
    print(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {role}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return role and "admin" in role  # –ï—Å–ª–∏ —Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫

def is_leader(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    role = get_client_role(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –∏–∑ Clients
    print(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {role}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return role and "supreme_leader" in role  # –ï—Å–ª–∏ —Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_client_"))
def handle_edit_client(call):
    client_id = int(call.data.split("_")[2])
    temp_user_data[call.from_user.id] = {"client_id": client_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞

    # –í—ã–≤–æ–¥–∏–º –≤—ã–±–æ—Ä, —á—Ç–æ –º–µ–Ω—è—Ç—å
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone"),
    )
    bot.send_message(
        call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ (–∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
@bot.callback_query_handler(func=lambda call: call.data in ["edit_name", "edit_phone"])
def handle_edit_choice(call):
    user_id = call.from_user.id

    if call.data == "edit_name":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        set_user_state(user_id, "EDITING_NAME")
    elif call.data == "edit_phone":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        set_user_state(user_id, "EDITING_PHONE")

# –ù–æ–≤—ã–π –ø–æ—Å—Ç
@bot.message_handler(func=lambda message: message.text == "‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")
def create_new_post(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    if role not in ["worker", "admin","supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(
        message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞."
    )
    temp_post_data[message.chat.id] = {}
    set_user_state(message.chat.id, UserState.CREATING_POST)

# –§–æ—Ç–æ
@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.chat.id
    role = get_client_role(user_id)
    state = get_user_state(message.chat.id)
    if role not in ["worker", "admin","supreme_leader"]:
        bot.send_message(
            user_id, "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        )
        return
    if state == UserState.CREATING_POST:
        temp_post_data[message.chat.id]["photo"] = message.photo[-1].file_id
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")

# –û–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.CREATING_POST)
def handle_post_details(message):
    chat_id = message.chat.id
    if "photo" in temp_post_data[chat_id] and "price" not in temp_post_data[chat_id]:
        if not message.text.isdigit():
            bot.send_message(
                chat_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        temp_post_data[chat_id]["price"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    elif (
        "price" in temp_post_data[chat_id]
        and "description" not in temp_post_data[chat_id]
    ):
        temp_post_data[chat_id]["description"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")
    elif (
        "description" in temp_post_data[chat_id]
        and "quantity" not in temp_post_data[chat_id]
    ):
        if not message.text.isdigit():
            bot.send_message(
                chat_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        temp_post_data[chat_id]["quantity"] = int(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        data = temp_post_data[chat_id]
        save_post(
            chat_id, data["photo"], data["price"], data["description"], data["quantity"]
        )
        bot.send_message(chat_id, "–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        clear_user_state(chat_id)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
@bot.message_handler(func=lambda message: message.text == "üìÑ –ü–æ—Å—Ç—ã")
def manage_posts(message):
    user_id = message.chat.id
    message_id = message.message_id  # ID —Å–∞–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É –∂–µ
    try:
        bot.delete_message(chat_id=user_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
    if role not in ["admin", "worker", "supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_last_message_id[user_id] - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if user_id not in user_last_message_id:
        user_last_message_id[user_id] = []
    elif not isinstance(user_last_message_id[user_id], list):
        user_last_message_id[user_id] = [user_last_message_id[user_id]]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for msg_id in user_last_message_id[user_id]:
        try:
            bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    user_last_message_id[user_id] = []

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª
        posts = Posts.get_unsent_posts()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_unsent_posts –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    except Exception as e:
        error_msg = bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
        user_last_message_id[user_id].append(error_msg.message_id)
        return

    if not posts:
        no_posts_msg = bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        user_last_message_id[user_id].append(no_posts_msg.message_id)
        return

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ
    for post in posts:
        post_id = post.id
        description = post.description
        price = post.price
        quantity = post.quantity
        photo = post.photo  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º
        markup = InlineKeyboardMarkup()
        edit_btn = InlineKeyboardButton(
            "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}"
        )
        delete_btn = InlineKeyboardButton(
            "üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post_id}"
        )
        markup.add(edit_btn, delete_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
        try:
            if photo:
                msg = bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=f"**–ü–æ—Å—Ç #{post_id}:**\n"
                            f"üìç *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                            f"üí∞ *–¶–µ–Ω–∞:* {price} ‚ÇΩ\n"
                            f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}",
                    parse_mode="Markdown",
                    reply_markup=markup,
                )
            else:
                msg = bot.send_message(
                    chat_id=user_id,
                    text=f"**–ü–æ—Å—Ç #{post_id}:**\n"
                         f"üìç *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                         f"üí∞ *–¶–µ–Ω–∞:* {price} ‚ÇΩ\n"
                         f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}",
                    parse_mode="Markdown",
                    reply_markup=markup,
                )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            user_last_message_id[user_id].append(msg.message_id)
        except Exception as e:
            error_msg = bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ #{post_id}: {e}")
            user_last_message_id[user_id].append(error_msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_post_"))
def edit_post(call):
    post_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    role = get_client_role(user_id)
    if role not in ["admin", "worker", "supreme_leader"]:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            show_alert=True,
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    temp_post_data[user_id] = {"post_id": post_id}

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = InlineKeyboardMarkup()
    edit_price_btn = InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_price_{post_id}")
    edit_description_btn = InlineKeyboardButton("üìç –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{post_id}")
    edit_quantity_btn = InlineKeyboardButton("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_quantity_{post_id}")
    markup.add(edit_price_btn, edit_description_btn, edit_quantity_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    if call.message.text:
        msg = bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?",
            reply_markup=markup
        )
        user_last_message_id[user_id].append(call.message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    else:
        msg = bot.send_message(
            chat_id=call.message.chat.id,
            text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?",
            reply_markup=markup
        )
        user_last_message_id[user_id].append(msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_choice(call):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {call.data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

    try:
        data_parts = call.data.split("_")  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        if len(data_parts) == 2:  # –î–ª—è –∫–æ–º–∞–Ω–¥ –±–µ–∑ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, "edit_address")
            action = data_parts[0]  # –î–µ–π—Å—Ç–≤–∏–µ (edit)
            target = data_parts[1]  # –¶–µ–ª—å (address)

            if action == "edit" and target == "address":
                # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                set_user_state(call.from_user.id, "EDITING_ADDRESS")
                bot.send_message(chat_id=call.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
            else:
                bot.send_message(chat_id=call.from_user.id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        elif len(data_parts) == 3:  # –î–ª—è –∫–æ–º–∞–Ω–¥ —Å ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, "edit_post_123")
            action = data_parts[0]
            target = data_parts[1]
            post_id = int(data_parts[2])  # ID –ø–æ—Å—Ç–∞

            if action == "edit" and target == "post":
                bot.send_message(chat_id=call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID {post_id}")
            else:
                bot.send_message(chat_id=call.from_user.id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

    except ValueError as e:
        bot.send_message(chat_id=call.from_user.id, text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    except Exception as e:
        bot.send_message(chat_id=call.from_user.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.")
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.EDITING_POST_PRICE)
def edit_post_price(message):
    user_id = message.chat.id
    post_id = temp_post_data[user_id]["post_id"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if not message.text.isdigit():
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    new_price = int(message.text)
    temp_post_data[user_id]["price"] = new_price

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π
        post = Posts.get_row_by_id(post_id)  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ ID
        success, msg = Posts.update_row(
            post_id=post_id,
            price=new_price,
            description=post.description,  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            quantity=post.quantity
        )
        if success:
            bot.send_message(user_id, "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: {msg}")
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
    finally:
        clear_user_state(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.EDITING_POST_DESCRIPTION)
def edit_post_description(message):
    user_id = message.chat.id
    post_id = temp_post_data[user_id]["post_id"]

    new_description = message.text
    temp_post_data[user_id]["description"] = new_description

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post = Posts.get_row_by_id(post_id)
        success, msg = Posts.update_row(
            post_id=post_id,
            price=post.price,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            description=new_description,
            quantity=post.quantity
        )
        if success:
            bot.send_message(user_id, "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {msg}")
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
    finally:
        clear_user_state(user_id)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.EDITING_POST_QUANTITY)
def edit_post_quantity(message):
    user_id = message.chat.id
    post_id = temp_post_data[user_id]["post_id"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if not message.text.isdigit():
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    new_quantity = int(message.text)
    temp_post_data[user_id]["quantity"] = new_quantity

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post = Posts.get_row_by_id(post_id)
        success, msg = Posts.update_row(
            post_id=post_id,
            price=post.price,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            description=post.description,
            quantity=new_quantity
        )
        if success:
            bot.send_message(user_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {msg}")
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
    finally:
        clear_user_state(user_id)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.EDITING_POST)
def edit_post_details(message):
    user_id = message.chat.id
    post_id = temp_post_data[user_id].get("post_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞
    if "last_message_id" in temp_post_data[user_id]:
        try:
            bot.delete_message(
                chat_id=user_id, message_id=temp_post_data[user_id]["last_message_id"]
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    if "bot_message_id" in temp_post_data[user_id]:
        try:
            bot.delete_message(
                chat_id=user_id, message_id=temp_post_data[user_id]["bot_message_id"]
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –µ—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
    if "price" not in temp_post_data[user_id]:
        if not message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ - —ç—Ç–æ —á–∏—Å–ª–æ
            error_msg = bot.send_message(
                user_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            temp_post_data[user_id]["bot_message_id"] = error_msg.message_id
            return

        temp_post_data[user_id]["price"] = int(message.text)
        msg = bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.")
        temp_post_data[user_id]["bot_message_id"] = msg.message_id
        temp_post_data[user_id]["last_message_id"] = message.message_id

    elif "description" not in temp_post_data[user_id]:
        temp_post_data[user_id]["description"] = message.text
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")
        temp_post_data[user_id]["bot_message_id"] = msg.message_id
        temp_post_data[user_id]["last_message_id"] = message.message_id

    elif "quantity" not in temp_post_data[user_id]:
        if not message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —ç—Ç–æ —á–∏—Å–ª–æ
            error_msg = bot.send_message(
                user_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            temp_post_data[user_id]["bot_message_id"] = error_msg.message_id
            return

        temp_post_data[user_id]["quantity"] = int(message.text)
        data = temp_post_data[user_id]

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ Posts.update_row –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ
            success, msg = Posts.update_row(
                post_id=post_id,
                price=data["price"],
                description=data["description"],
                quantity=data["quantity"],
            )

            if success:
                confirmation_msg = bot.send_message(user_id, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
                temp_post_data[user_id]["bot_message_id"] = confirmation_msg.message_id
                del temp_post_data[user_id]  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                clear_user_state(user_id)
            else:
                bot.send_message(user_id, f"–û—à–∏–±–∫–∞: {msg}")

        except Exception as e:
            bot.send_message(
                user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}"
            )

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_post_"))
def delete_post_handler(call):
    post_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞
    try:
        # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ)
        result, msg = Posts.delete_row(post_id=post_id)
        if result:
            # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            bot.answer_callback_query(call.id, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–º)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            # –í–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {msg}")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    try:
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.chat.id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if is_admin(message.chat.id):
            markup = admin_main_menu()  # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            bot.send_message(
                message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup
            )
        else:
            markup = client_main_menu()  # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
            bot.send_message(
                message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': {e}")
        bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda message: message.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª")
def send_new_posts_to_channel(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–æ–≤
    if role not in ["admin","supreme_leader"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª
    posts = Posts.get_unsent_posts()

    if posts:
        for post in posts:
            post_id = post.id
            photo = post.photo
            price = post.price
            description = post.description
            quantity = post.quantity

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ Posts, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞ –≤ Clients
            creator_user_id = post.chat_id
            creator_name = Clients.get_name_by_user_id(creator_user_id) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
            caption = f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Å—Ç–∞—Ç–æ–∫: {quantity}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            markup = InlineKeyboardMarkup()
            reserve_btn = InlineKeyboardButton(
                "üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{post_id}"
            )
            to_bot_button = InlineKeyboardButton(
                "–í –±–æ—Ç–∞", url="https://t.me/MegaSkidkiTgBot?start=start"
            )
            markup.add(reserve_btn, to_bot_button)



            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
            sent_message = bot.send_photo(
                CHANNEL_ID, photo=photo, caption=caption, reply_markup=markup
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            group_caption = (
                f"–ü–æ—Å—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {creator_name}\n\n{caption}"
            )
            bot.send_photo(ARCHIVE, photo=photo, caption=group_caption)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            Posts.mark_as_sent(post_id=post_id, message_id=sent_message.message_id)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
            time.sleep(4)

        bot.send_message(
            user_id,
            f"‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã ({len(posts)}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É.",
        )
    else:
        bot.send_message(user_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ç–∞
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_NAME)
def register_name(message):
    user_id = message.chat.id
    temp_user_data[user_id]["name"] = message.text
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    set_user_state(user_id, UserState.REGISTERING_PHONE)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['statistic'])
def handle_statistic(message):
    from datetime import datetime, timedelta

    today = datetime.now()
    monday = today - timedelta(days=today.weekday())
    days_range = {'today': (today.date(), today.date()), 'week': (monday.date(), today.date())}

    statistics = {"today": {}, "week": {}}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_posts = Posts.get_row_all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ all_posts:", all_posts)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã

    all_clients = Clients.get_row_all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ all_clients:", all_clients)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å {user_id: name}
    clients_dict = {}
    if not all_clients:
        print("–î–∞–Ω–Ω—ã–µ all_clients –ø—É—Å—Ç—ã –∏–ª–∏ None!")
        clients_dict = {}
    elif isinstance(all_clients, dict):
        print("all_clients ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ clients_dict.")
        clients_dict = {key: value.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") for key, value in all_clients.items()}
    elif isinstance(all_clients, list):
        if all(isinstance(client, dict) for client in all_clients):
            print("all_clients ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ clients_dict.")
            clients_dict = {client["user_id"]: client.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") for client in all_clients}
        else:
            print("all_clients ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ clients_dict.")
            clients_dict = {client.user_id: client.name for client in all_clients}
    else:
        raise TypeError(f"Unsupported data type for 'all_clients': {type(all_clients)}")

    print("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π clients_dict:", clients_dict)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤
    for key, date_range in days_range.items():
        for post in all_posts:
            created_at = post.created_at.date()
            print(f"–ü–æ—Å—Ç ID: {post.id}, chat_id: {post.chat_id}, created_at: {post.created_at}")

            if date_range[0] <= created_at <= date_range[1]:
                creator_name = clients_dict.get(post.chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                print(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞ —Å chat_id {post.chat_id}: {creator_name}")

                if creator_name not in statistics[key]:
                    statistics[key][creator_name] = 0

                statistics[key][creator_name] += 1

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:\n"
    for period, names_data in statistics.items():
        period_label = "–°–µ–≥–æ–¥–Ω—è" if period == "today" else "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
        response += f"\n{period_label}:\n"

        for name, count in names_data.items():
            response += f"  - {name}: {count} –ø–æ—Å—Ç–æ–≤\n"

    if not statistics["today"] and not statistics["week"]:
        response = "–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–µ–¥–µ–ª—é."

    bot.send_message(message.chat.id, response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'.
@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def send_broadcast(message):
    user_id = message.from_user.id

    bot.send_message(chat_id=user_id, text="–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        eligible_users = calculate_for_delivery()

        if eligible_users:
            for user in eligible_users:
                print(f"–†–∞—Å—Å—ã–ª–∫–∞: User ID: {user['user_id']}, Name: {user['name']}, Final Sum: {user['final_sum']}")
                send_delivery_offer(bot, user["user_id"], user["name"])

            # bot.send_message(chat_id=user_id, text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            bot.send_message(chat_id=user_id, text="–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.send_message(chat_id=user_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"])
def handle_delivery_response_callback(call):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    response = call.data  # –ü–æ–ª—É—á–∞–µ–º "yes" –∏–ª–∏ "no" –∏–∑ callback data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–æ –ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ—Å–ª–µ 14:00(–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ–Ω—è–ª –Ω–∞ 23)
    current_time = datetime.now().time()  # –¢–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    if response == "yes" and current_time.hour >= 23:
        # –û—Ç–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
        bot.send_message(chat_id=user_id,
                         text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ª–∏—Å—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
    elif response == "yes":
        # –ï—Å–ª–∏ "–î–∞" –∏ –≤—Ä–µ–º—è –¥–æ 14:00, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –º—ã –∂–¥—ë–º –∞–¥—Ä–µ—Å
        bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å –∏ –ø–æ–¥—ä–µ–∑–¥")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
        set_user_state(user_id, "WAITING_FOR_ADDRESS")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif response == "no":
        # –ï—Å–ª–∏ "–ù–µ—Ç", —É–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ–∑–∂–µ
        bot.send_message(chat_id=user_id, text="–û–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç–∞–≤–∫–µ.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "WAITING_FOR_ADDRESS")
def handle_address_input(message):
    user_id = message.chat.id
    address = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

    # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    user_data = Clients.get_row_by_user_id(user_id)
    if not user_data:
        bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    name = user_data.name
    phone = user_data.phone
    final_sum = calculate_sum_for_user(user_id)  # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ (—Å–º. –Ω–∏–∂–µ)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.send_message(
        chat_id=user_id,
        text=f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {final_sum}\n–ê–¥—Ä–µ—Å: {address}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
        reply_markup=keyboard_for_confirmation()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"/"–û—Ç–º–µ–Ω–∏—Ç—å"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    temp_user_data[user_id] = {
        "name": name,
        "phone": phone,
        "final_sum": final_sum,
        "address": address
    }

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    set_user_state(user_id, "WAITING_FOR_CONFIRMATION")

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
def calculate_sum_for_user(user_id):
    with Session(bind=engine) as session:
        result = session.query(
            func.sum(Posts.price - Reservations.return_order).label("final_sum")
        ).join(
            Reservations, Posts.id == Reservations.post_id
        ).filter(
            Reservations.user_id == user_id, Reservations.is_fulfilled == True
        ).first()

        return result.final_sum if result.final_sum else 0

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def keyboard_for_confirmation():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    keyboard = InlineKeyboardMarkup()
    yes_button = InlineKeyboardButton("–î–∞", callback_data="yes–°")  # Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    no_button = InlineKeyboardButton("–ù–µ—Ç", callback_data="no–°")  # Callback –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard.add(yes_button, no_button)
    return keyboard


def keyboard_for_editing():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    keyboard = InlineKeyboardMarkup()
    edit_address_button = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="edit_address")
    edit_phone_button = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="edit_phone")
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
    keyboard.add(edit_address_button, edit_phone_button)
    keyboard.add(cancel_button)
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏.
@bot.callback_query_handler(func=lambda call: get_user_state(call.from_user.id) == "WAITING_FOR_CONFIRMATION")
def handle_confirmation(call):
    user_id = call.from_user.id
    confirmation = call.data  # "yes–°" –∏–ª–∏ "no–°"

    if confirmation == "yes–°":
        user_temp_data = temp_user_data.get(user_id)
        if user_temp_data:
            name = user_temp_data.get("name")
            phone = user_temp_data.get("phone")
            address = user_temp_data.get("address")
            final_sum = user_temp_data.get("final_sum")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É for_delivery
            ForDelivery.insert(
                user_id=user_id,
                name=name,
                phone=phone,
                address=address,
                total_sum=final_sum
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(
                chat_id=user_id,
                text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤—è—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å: {address}\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {final_sum}."
            )

            del temp_user_data[user_id]
            set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            bot.send_message(chat_id=user_id,
                             text="–û—à–∏–±–∫–∞! –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            set_user_state(user_id, None)

    elif confirmation == "no–°":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        bot.send_message(chat_id=user_id, text="–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
                         reply_markup=keyboard_for_editing())

    bot.answer_callback_query(call.id)  # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω

@bot.message_handler(func=lambda message: message.text == "–ê—Ä—Ö–∏–≤ –¥–æ—Å—Ç–∞–≤–∫–∏")
def archive_delivery_to_excel(message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ö–∏–≤–æ–º –¥–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã in_delivery,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∫–∞–Ω–∞–ª delivery_archive, –∏ –æ—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã InDelivery
    delivery_rows = InDelivery.get_all_rows()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if not delivery_rows:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.")
        return None

    # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê—Ä—Ö–∏–≤ –¥–æ—Å—Ç–∞–≤–æ–∫"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    ws.append(["–¢–µ–ª–µ—Ñ–æ–Ω", "–ò–º—è", "–û–±—â–∞—è —Å—É–º–º–∞", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    for row in delivery_rows:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Clients
        client_data = Clients.get_row_by_user_id(row.user_id)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        ws.append([
            client_data.phone if client_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            client_data.name if client_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            row.total_sum,
            row.delivery_address,
            row.item_description
        ])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

    # –£–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ InputFile
    file_name = f"–ê—Ä—Ö–∏–≤_–¥–æ—Å—Ç–∞–≤–æ–∫_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
    document =  InputFile(output, file_name=file_name)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∫–∞–Ω–∞–ª delivery_archive
    bot.send_document(chat_id=delivery_archive, document=document)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
    bot.send_message(message.chat.id, "–ê—Ä—Ö–∏–≤ –¥–æ—Å—Ç–∞–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")

    # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã in_delivery
    InDelivery.clear_table()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
    bot.send_message(message.chat.id, "–í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã in_delivery —É–¥–∞–ª–µ–Ω—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@bot.callback_query_handler(func=lambda call: call.data in ["edit_address", "edit_phone", "cancel_edit"])
def handle_editing(call):
    user_id = call.from_user.id
    action = call.data

    if action == "edit_address":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        set_user_state(user_id, "EDITING_ADDRESS")
        bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    elif action == "edit_phone":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        set_user_state(user_id, "EDITING_PHONE")
        bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif action == "cancel_edit":
        # –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(user_id, None)
        bot.send_message(chat_id=user_id, text="–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")

    bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) in ["EDITING_ADDRESS", "EDITING_PHONE"])
def handle_new_data_input(message):
    user_id = message.from_user.id
    current_state = get_user_state(user_id)

    if current_state == "EDITING_ADDRESS":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if user_id in temp_user_data:
            temp_user_data[user_id]["address"] = message.text
            bot.send_message(chat_id=user_id, text=f"–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message.text}")
        else:
            bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞! –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    elif current_state == "EDITING_PHONE":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if is_phone_valid(message.text):
            if user_id in temp_user_data:
                temp_user_data[user_id]["phone"] = message.text
                bot.send_message(chat_id=user_id, text=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {message.text}")
            else:
                bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞! –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            bot.send_message(chat_id=user_id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    set_user_state(user_id, "WAITING_FOR_CONFIRMATION")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
                     reply_markup=keyboard_for_confirmation())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç
def keyboard_for_delivery():
    """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç".
        """
    keyboard = InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    yes_button = InlineKeyboardButton(text="–î–∞", callback_data="yes")  # –ö–Ω–æ–ø–∫–∞ "–î–∞"
    no_button = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")  # –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç"
    keyboard.add(yes_button, no_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –º–∏–Ω—É—Å —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ >= min_order_sum.
def get_eligible_users(min_order_sum=2000):
    # –í—ã–∑—ã–≤–∞–µ–º calculate_processed_sum –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    processed_sums = calculate_processed_sum()  # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–∞—Ä—å {user_id: total_processed_sum}

    with Session(bind=engine) as session:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—É–º–º—ã –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        returns_query = session.query(
            Reservations.user_id,
            func.sum(Reservations.return_order).label("total_return_sum")
        ).group_by(Reservations.user_id).all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
        returns_dict = {row.user_id: row.total_return_sum for row in returns_query}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        eligible_users = []
        for user_id, total_sum in processed_sums.items():
            total_returns = returns_dict.get(user_id, 0)  # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Ä–∞–≤–Ω—ã–º–∏ 0
            final_sum = total_sum - total_returns  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ >= min_order_sum
            if final_sum >= min_order_sum:
                user_data = session.query(Clients).filter(Clients.user_id == user_id).first()
                if user_data:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Clients
                    eligible_users.append({
                        "user_id": user_id,
                        "name": user_data.name,
                        "phone": user_data.phone,
                        "final_sum": final_sum,
                    })

        return eligible_users

# –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Posts, –º–∏–Ω—É—Å—É—è –≤–æ–∑–≤—Ä–∞—Ç—ã (return_order),–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥.
def calculate_for_delivery(min_order_sum=2000):
    with Session(bind=engine) as session:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º –∑–∞–∫–∞–∑–æ–≤
        query = session.query(
            Reservations.user_id,
            Clients.name,
            Clients.phone,
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Posts –º–∏–Ω—É—Å –≤–æ–∑–≤—Ä–∞—Ç—ã –∏–∑ Reservations
            (func.sum(Posts.price) - func.sum(Reservations.return_order)).label("final_sum")
        ).join(
            Clients, Reservations.user_id == Clients.user_id
        ).join(
            Posts, Reservations.post_id == Posts.id  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π Posts —á–µ—Ä–µ–∑ post_id
        ).filter(
            Reservations.is_fulfilled == True  # –¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        ).group_by(
            Reservations.user_id, Clients.name, Clients.phone
        ).having(
            (func.sum(Posts.price) - func.sum(Reservations.return_order)) >= min_order_sum
        ).all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        results = [
            {"user_id": row.user_id, "name": row.name, "phone": row.phone, "final_sum": row.final_sum}
            for row in query
        ]

        return results

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
def send_delivery_offer(bot, user_id, user_name):

    bot.send_message(
        chat_id=user_id,
        text=f"{user_name}, –≥–æ—Ç–æ–≤—ã –ª–∏ –í—ã –ø—Ä–∏–Ω—è—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–≤—Ç—Ä–∞ —Å 10:00 –¥–æ 16:00?",
        reply_markup=keyboard_for_delivery()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏.
def handle_delivery_response(bot, user_id, response):
    if response.lower() == "–¥–∞":
        bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å –∏ –ø–æ–¥—ä–µ–∑–¥")
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.
        set_user_state(user_id, "WAITING_FOR_ADDRESS")
    else:
        bot.send_message(
            chat_id=user_id, text="–û–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç–∞–≤–∫–µ."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
def handle_address_input(bot, user_id, address):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = Clients.get_row_by_user_id(user_id)
    if user_data:
        name = user_data.name
        phone = user_data.phone

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_message(
            chat_id=user_id,
            text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å: {address}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ?",
            reply_markup=create_yes_no_keyboard()
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        set_user_state(user_id, "WAITING_FOR_CONFIRMATION")
        temp_user_data[user_id] = {"address": address, "name": name, "phone": phone}
    else:
        bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
def handle_confirmation(bot, user_id, confirmation):
    if confirmation.lower() == "–¥–∞":
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –≤–≤–æ–¥–∏–ª
        user_temp_data = temp_user_data.get(user_id)
        if user_temp_data:
            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É ForDelivery
            ForDelivery.insert(
                user_id=user_id,
                name=user_temp_data["name"],
                phone=user_temp_data["phone"],
                address=user_temp_data["address"]
            )
            bot.send_message(chat_id=user_id, text="–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É!")
        else:
            bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        bot.send_message(
            chat_id=user_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ."
        )
        set_user_state(user_id, "WAITING_FOR_ADDRESS")  # –í–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
def confirm_delivery(message):
    try:
        with Session(bind=engine) as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ForDelivery
            for_delivery_rows = session.query(ForDelivery).all()

            if not for_delivery_rows:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –í —Å–ø–∏—Å–∫–µ ForDelivery –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."
                )
                return

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for row in for_delivery_rows:
                # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ Reservations —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reservations = session.query(Reservations).filter(
                    Reservations.user_id == row.user_id,
                    Reservations.is_fulfilled == True
                ).all()

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                total_sum = 0
                order_descriptions = []  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞

                for reservation in reservations:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ Posts
                    post = session.query(Posts).filter(Posts.id == reservation.post_id).first()
                    item_description = post.description if post else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º
                    order_descriptions.append(f"{item_description} x{reservation.quantity}")
                    total_sum += reservation.quantity * (post.price if post else 0)  # –£–º–Ω–æ–∂–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

                    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ Reservations
                    session.delete(reservation)

                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ InDelivery
                if order_descriptions:
                    new_delivery = InDelivery(
                        user_id=row.user_id,
                        item_description="\n".join(order_descriptions),  # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
                        quantity=len(order_descriptions),  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
                        total_sum=total_sum if total_sum > 0 else row.total_sum,
                        # –ï—Å–ª–∏ –æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è, –±–µ—Ä–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        delivery_address=row.address,
                    )
                    session.add(new_delivery)

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ForDelivery
            ForDelivery.delete_all_rows()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            bot.send_message(
                message.chat.id,
                "‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∏–∑ ForDelivery –≤ InDelivery!"
            )

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {str(e)}"
        )
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
    # pizdec
