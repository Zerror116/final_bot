import re
import telebot
import psycopg2


from bot import admin_main_menu, client_main_menu, worker_main_menu, unknown_main_menu, supreme_leader_main_menu
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from database.config import TOKEN, CHANNEL_ID, ADMIN_USER_ID, TARGET_GROUP_ID
from telebot.apihelper import ApiTelegramException
from db import Reservations, Posts, Clients, BlackList
from handlers.clients_manage import *
from handlers.posts_manage import *
from types import SimpleNamespace
from datetime import datetime, timedelta

from handlers.reservations_manage import calculate_total_sum, calculate_processed_sum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
user_messages = {}
user_pages = {}
PAGE_SIZE = 5
user_last_message_id = {}
last_bot_message = {}
user_data = {}
user_states = {}
temp_user_data = {}
temp_post_data = {}
last_start_time = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState:
    STARTED_REGISTRATION = 0
    REGISTERING_NAME = 1
    REGISTERING_PHONE = 2
    CREATING_POST = 3
    EDITING_POST = 4
    NEUTRAL = None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def save_reservation(user_id, post_id, quantity=1, is_fulfilled=False):
    try:
        Reservations.insert(
            user_id=user_id,
            quantity=quantity,
            post_id=post_id,
            is_fulfilled=is_fulfilled,
        )
        return True, "–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: {e}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
@bot.message_handler(commands=["unsent_posts"])
def list_unsent_posts(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role not in ["admin", "worker"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    try:
        unsent_posts = Posts.get_unsent_posts()
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if unsent_posts:
        response = "üìÆ –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
        for post in unsent_posts:
            post_id, price, description, quantity = post
            response += f"ID: {post_id} | –¶–µ–Ω–∞: {price}‚ÇΩ | –û–ø–∏—Å–∞–Ω–∏–µ: {description} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, "‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = get_client_role(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    greetings = {
        "client": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "worker": "–î–∞–≤–∞–π –∑–∞ —Ä–∞–±–æ—Ç—É!",
        "supreme_leader": "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
        "admin": "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    }
    greeting = greetings.get(role, "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—à—É –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

    # –°—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    support_link = "https://t.me/+Li2_LC6Anm9iMTli"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    channel_link = "https://t.me/MegaSkidkiTg"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª

    inline_markup = InlineKeyboardMarkup()
    inline_markup.add(InlineKeyboardButton("–í –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=support_link))
    inline_markup.add(InlineKeyboardButton("–ù–∞ –∫–∞–Ω–∞–ª", url=channel_link))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role == "admin":
        reply_markup = admin_main_menu()
    elif role == "client":
        reply_markup = client_main_menu()
    elif role == "worker":
        reply_markup = worker_main_menu()
    elif role == "supreme_leader":
        reply_markup = supreme_leader_main_menu()
    else:
        reply_markup = unknown_main_menu()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if user_id in last_bot_message:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
            bot.delete_message(
                chat_id=user_id, message_id=last_bot_message[user_id]["greeting"]
            )
        except Exception as e:
            print(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {e}"
            )
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
            bot.delete_message(
                chat_id=user_id, message_id=last_bot_message[user_id].get("resources")
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    try:
        sent_greeting = bot.send_message(user_id, greeting, reply_markup=reply_markup)

        # –ï—Å–ª–∏ —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
        if role == "client":
            sent_resources = bot.send_message(
                user_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=inline_markup
            )
        else:
            sent_resources = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        last_bot_message[user_id] = {
            "greeting": sent_greeting.message_id,
            "resources": sent_resources.message_id if sent_resources else None,
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞ /start)
    try:
        bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def handle_registration(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if is_user_blacklisted(chat_id):
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if Clients.get_row_by_user_id(chat_id):
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        handle_start(message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
    set_user_state(chat_id, UserState.REGISTERING_NAME)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_NAME)
def handle_name_registration(message):
    chat_id = message.chat.id
    user_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if len(user_name) < 2:
        bot.send_message(chat_id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id not in temp_user_data:
        temp_user_data[chat_id] = {}
    temp_user_data[chat_id]["name"] = user_name

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞
    set_user_state(chat_id, UserState.STARTED_REGISTRATION)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.STARTED_REGISTRATION)
def handle_phone_registration(message):
    chat_id = message.chat.id
    raw_phone = message.text.strip()
    cleaned_phone = re.sub(r"\D", "", raw_phone)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    if is_phone_valid(cleaned_phone):
        if cleaned_phone.startswith("7"):
            cleaned_phone = "8" + cleaned_phone[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ
        existing_client = Clients.get_row_by_phone(cleaned_phone)
        if existing_client:
            # –ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {cleaned_phone} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É? "
                "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞.",
                reply_markup=create_yes_no_keyboard()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if chat_id not in temp_user_data:
                temp_user_data[chat_id] = {}
            temp_user_data[chat_id]["phone"] = cleaned_phone
            set_user_state(chat_id, UserState.REGISTERING_PHONE)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            complete_registration(chat_id, cleaned_phone)
    else:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, +7XXXXXXXXXX")

def is_phone_valid(phone):
    pattern = r"^(8|7|\+7)\d{10}$"
    return re.match(pattern, phone) is not None

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_PHONE)
def confirm_phone_registration(message):
    chat_id = message.chat.id
    response = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id not in temp_user_data or "phone" not in temp_user_data[chat_id]:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        clear_user_state(chat_id)
        return

    new_phone = temp_user_data[chat_id]["phone"]
    user_name = temp_user_data[chat_id].get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–º—è

    if response == "–¥–∞":
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞
        existing_client = Clients.get_row_by_phone(new_phone)
        if existing_client:
            bot.send_message(
                existing_client.user_id,
                f"‚ö†Ô∏è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ({new_phone}) –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. "
                "–ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–∑–≤–∞–ª–æ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        complete_registration(chat_id, new_phone)

    elif response == "–Ω–µ—Ç":
        bot.send_message(chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
        set_user_state(chat_id, UserState.STARTED_REGISTRATION)  # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
    else:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *'–î–∞'* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *'–ù–µ—Ç'* –¥–ª—è –æ—Ç–∫–∞–∑–∞.",
            parse_mode="Markdown"
        )

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def complete_registration(chat_id, phone):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = temp_user_data.get(chat_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")  # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º user_id
        role = "supreme_leader" if chat_id == ADMIN_USER_ID else "client"

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º user_id
        existing_user = Clients.get_row_by_user_id(chat_id)

        if existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            success, message = Clients.update_row(
                user_id=chat_id,
                name=name,
                phone=phone,
                role=role  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
            )

            if success:
                print(f"[DEBUG]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {message}")
            else:
                print(f"[DEBUG]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {message}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            Clients.insert(
                user_id=chat_id,
                name=name,
                phone=phone,
                role=role  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
            )
        # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clear_user_state(chat_id)

        # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        bot.send_message(
            chat_id,
            f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º: {phone}",
            reply_markup=types.ReplyKeyboardRemove()
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è start
        handle_start(SimpleNamespace(chat=SimpleNamespace(id=chat_id), message_id=None))
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[ERROR]: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞ –∏–ª–∏ –Ω–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
def create_yes_no_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
    return markup

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ no
def is_user_blacklisted(user_id: int) -> bool:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_row –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã black_list
    blacklisted_user = BlackList.get_row(user_id)
    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    return bool(blacklisted_user)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è no
def is_user_registered(phone: str) -> bool:
    try:
        with Session(bind=engine) as session:
            # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            return session.query(Clients).filter(Clients.phone == phone).first() is not None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
# @bot.message_handler(commands=["setrole"])
# def set_role_command(message):
#     user_id = message.chat.id
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#     user_data = Clients.get_row(user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ ID
#     if not user_data or user_data.role != "admin":
#         bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
#         return
#
#     try:
#         # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/setrole user_id role"
#         _, target_user_id, role = message.text.split()  # –ö–æ–º–∞–Ω–¥–∞, ID, —Ä–æ–ª—å
#         target_user_id = int(target_user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ int
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
#         if role not in ["client", "worker", "admin"]:
#             bot.send_message(
#                 user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑: client, worker, admin."
#             )
#             return
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
#         target_user_data = Clients.get_row(target_user_id)  # –°–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ ID
#         if not target_user_data:
#             bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             return
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
#         Clients.update_row_to_role({"id": target_user_id}, {"role": role})
#
#         bot.send_message(
#             user_id,
#             f"–†–æ–ª—å '{role}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.",
#         )
#     except ValueError:
#         bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setrole user_id role")
#     except Exception as e:
#         bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("reserve_"))
def handle_reservation(call):
    post_id = int(call.data.split("_")[1])
    user_id = call.from_user.id

    if is_user_blacklisted(user_id):
        return "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not is_registered(user_id):
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞",
            show_alert=True,
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
    post = Posts.get_row_by_id(post_id)
    if not post:  # –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ get_row_by_id –≤–µ—Ä–Ω—É–ª None
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ get_row_by_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é
    current_quantity = post.quantity
    message_id = post.message_id
    price = post.price
    description = post.description

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    if current_quantity == 0:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!",
            show_alert=True,
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    Reservations.insert(user_id=user_id, quantity=1, post_id=post_id, is_fulfilled=False)

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1
    new_quantity = current_quantity - 1
    update_status, message = Posts.update_row(
        post_id=post_id, price=price, description=description, quantity=new_quantity
    )
    if not update_status:
        bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ: {message}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    new_caption = (
        f"–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Å—Ç–∞—Ç–æ–∫: {new_quantity}"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    try:
        bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=message_id,
            caption=new_caption,
            reply_markup=call.message.reply_markup,  # –ö–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
        )
    except Exception as e:
        bot.send_message(
            user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ. –û—à–∏–±–∫–∞: {e}"
        )

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if new_quantity == 0:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–≤–∞—Ä–∞!",
            show_alert=True,
        )
    else:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            show_alert=False,
        )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_reservations(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reservations = Reservations.get_row_all(user_id)
    if not reservations:
        return []

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    for reservation in reservations:
        post_id = reservation.post_id
        print(f"Checking post_id: {post_id}")  # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥ post_id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        post = Posts.get_row_by_id(post_id)
        if not post:
            print(f"Post not found for post_id: {post_id}")  # –û—Ç–ª–∞–¥–∫–∞: –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.append({
            "description": post.description,
            "price": post.price,
            "photo": post.photo,
            "quantity": reservation.quantity,
            "is_fulfilled": reservation.is_fulfilled
        })

    print(f"Final results: {results}")  # –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ
    return results

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∏—Ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=["my_reservations"])
def show_reservations(message):
    user_id = message.chat.id
    query = Clients.get_row(user_id=user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # if not is_registered(user_id):
    if query is None:
        msg = bot.send_message(
            user_id,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start register.",
        )
        user_messages[user_id] = [msg.message_id]
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reservations = get_user_reservations(user_id)

    if reservations:
        for idx, (description, price, photo, quantity, is_fulfilled) in enumerate(
            reservations, start=1
        ):
            status = "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–æ" if is_fulfilled else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = (
                f"{idx}. –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ x {quantity}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )

            if photo:
                try:
                    sent_photo = bot.send_photo(user_id, photo=photo, caption=caption)
                    user_messages.setdefault(user_id, []).append(sent_photo.message_id)
                except Exception as e:
                    bot.send_message(
                        user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}"
                    )  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–∫–∞–∑
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def order_details(call):
    reservation_id = int(call.data.split("_")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ ORM
        order = Reservations.get_row_by_id(reservation_id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º
        post = Posts.get_row_by_id(order.post_id)
        if not post:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if order.is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        caption = f"–¢–æ–≤–∞—Ä: {post.description}\n–¶–µ–Ω–∞: {post.price}\n–°—Ç–∞—Ç—É—Å: {status}"

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup()
        back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders")
        markup.add(back_btn)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if not order.is_fulfilled:
            cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"cancel_{reservation_id}")
            markup.add(cancel_btn)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        bot.edit_message_media(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            media=InputMediaPhoto(media=post.photo, caption=caption),
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "my_orders")
def show_my_orders(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.
    """
    message = call.message
    my_orders(message)  # –í—ã–∑—ã–≤–∞–µ–º my_orders, –ø–µ—Ä–µ–¥–∞—ë–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ú–æ–∏ –∑–∞–∫–∞–∑—ã
@bot.message_handler(func=lambda message: message.text == "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    user_id = message.chat.id
    message_id = message.message_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(row_width=1)

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
        try:
            bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        last_message_id = user_last_message_id.get(user_id)
        if last_message_id:
            try:
                bot.delete_message(chat_id=user_id, message_id=last_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ ORM
        orders = Reservations.get_row_by_user_id(user_id)

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if orders:
            user_pages[user_id] = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
            new_message = send_order_page(user_id=user_id, message_id=None, orders=orders, page=user_pages[user_id])
            user_last_message_id[user_id] = new_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            keyboard.add(InlineKeyboardButton(text="–ù–∞ –∫–∞–Ω–∞–ª", url="https://t.me/mgskidkitest"))
            new_message = bot.send_message(
                chat_id=user_id,
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫–∏, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
                reply_markup=keyboard,
            )
            user_last_message_id[user_id] = new_message.message_id
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã': {ex}")

# –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
def send_order_page(user_id, message_id, orders, page):
    orders_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * orders_per_page
    end = start + orders_per_page
    total_pages = (len(orders) - 1) // orders_per_page + 1
    selected_orders = orders[start:end]

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    total_sum = sum(
        Posts.get_row_by_id(order.post_id).price for order in orders if Posts.get_row_by_id(order.post_id)
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ö–æ–ª–æ–Ω–∫–∏: –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    text = f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for order in selected_orders:
        post = Posts.get_row_by_id(order.post_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ORM
        if post:
            status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if order.is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            keyboard.add(InlineKeyboardButton(
                text=f"{post.price} ‚ÇΩ - {post.description} ({status})",
                callback_data=f"order_{order.id}"
            ))

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–æ–≤
    text += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_sum} ‚ÇΩ\n"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if page > 0:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_page_{page - 1}"))
    if end < len(orders):
        keyboard.add(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"orders_page_{page + 1}"))

    # –§–æ—Ç–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    photo_path = "images/my_cart.jpg"
    with open(photo_path, "rb") as photo:
        if message_id:
            return bot.edit_message_media(
                chat_id=user_id,
                message_id=message_id,
                media=InputMediaPhoto(photo, caption=text),
                reply_markup=keyboard
            )
        else:
            return bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=text,
                reply_markup=keyboard
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("orders_page_"))
def paginate_orders(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    page = int(call.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = Reservations.get_row_by_user_id(user_id=user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    try:
        new_message = send_order_page(user_id=user_id, message_id=message_id, orders=orders, page=page)
        user_last_message_id[user_id] = new_message.message_id  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
    finally:
        bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_"))
def cancel_reservation(call):
       reservation_id = int(call.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
       user_id = call.from_user.id  # –ë–µ—Ä—ë–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

       try:
           # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ ORM
           order = Reservations.get_row_by_id(reservation_id)
           if not order or order.user_id != user_id:
               bot.answer_callback_query(call.id, "–†–µ–∑–µ—Ä–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
               return

           # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
           if order.is_fulfilled:
               bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
               return

           # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
           post = Posts.get_row_by_id(order.post_id)
           if not post:
               bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
               return

           # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ Reservations
           success = Reservations.cancel_order_by_id(reservation_id)
           if not success:
               bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.", show_alert=True)
               return

           # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
           Posts.increment_quantity_by_id(order.post_id)

           # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ –≥—Ä—É–ø–ø–µ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ post.message_id)
           if post.message_id:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–æ–≤–∞—Ä–æ–º
               try:
                   bot.delete_message(chat_id=TARGET_GROUP_ID, message_id=post.message_id)
                   print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {post.message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã {TARGET_GROUP_ID}.")
               except Exception as e:
                   print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
           else:
               print("–ù–µ –Ω–∞–π–¥–µ–Ω message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã.")

           # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ, —É–≤–µ–ª–∏—á–∏–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
           if post.message_id:  # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω message_id –ø–æ—Å—Ç–∞
               new_quantity = post.quantity + 1  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
               updated_caption = (
                   f"–¢–æ–≤–∞—Ä: {post.description}\n"
                   f"–¶–µ–Ω–∞: {post.price} ‚ÇΩ\n"
                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity}"
               )
               markup = InlineKeyboardMarkup()
               reserve_button = InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{post.id}")
               to_bot_button = InlineKeyboardButton("–í –ë–æ—Ç–∞", url="https://t.me/MegaSkidkiTgBot?start=start")
               markup.add(reserve_button, to_bot_button)

               try:
                   bot.edit_message_caption(
                       chat_id=CHANNEL_ID,
                       message_id=post.message_id,
                       caption=updated_caption,
                       reply_markup=markup,
                   )
               except Exception as e:
                   print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {e}")

           # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
           bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–æ–≤–∞—Ä–∞.", show_alert=False)

           # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
           my_orders(call.message)

       except Exception as e:
           print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞: {e}")
           bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã.", show_alert=True)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "go_back")
def go_back_to_menu(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç.")

# –ü–µ—Ä–µ—Å—Å—ã–ª–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≥—Ä—É–ø–ø—É –ë—Ä–æ–Ω–∏ –ú–µ–≥–∞ –°–∫–∏–¥–∫–∏
@bot.message_handler(func=lambda message: message.text == "üì¶ –ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
def send_all_reserved_to_group(message):
    user_id = message.chat.id
    role = get_client_role(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        reservations = (
            Reservations.get_row_all()
        )  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –º–µ—Ç–æ–¥ `get_all` –≤ Reservations

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        if not reservations:
            bot.send_message(user_id, "–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        reservations_to_send = [r for r in reservations if not r.is_fulfilled]

        if not reservations_to_send:
            bot.send_message(user_id, "–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            print(f"‚úÖ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            return

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(reservations_to_send)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

        for reservation in reservations_to_send:
            try:
                reservation_id = reservation.id
                print(
                    f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID: {reservation_id}, post_id: {reservation.post_id}"
                )

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–µ —á–µ—Ä–µ–∑ –µ–≥–æ ID
                post_data = Posts.get_row(
                    reservation.post_id
                )  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ get_row

                if not post_data:
                    bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –ü–æ—Å—Ç —Å ID {reservation.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.",
                    )
                    print(
                        f"‚ö†Ô∏è –ü–æ—Å—Ç —Å ID {reservation.post_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                    )
                    continue

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å—Ç–∞
                photo = post_data.photo
                price = post_data.price or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                description = post_data.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
                client_data = Clients.get_row(
                    reservation.user_id
                )  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                if not client_data:
                    bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å ID {reservation.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.",
                    )
                    print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å ID {reservation.user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")
                    continue

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
                client_name = client_data.name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                client_phone = client_data.phone or "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                caption = (
                    f"üíº –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                    f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                )

                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                markup = InlineKeyboardMarkup()
                mark_button = InlineKeyboardButton(
                    text="‚úÖ –ü–æ–ª–æ–∂–∏–ª",
                    callback_data=f"mark_fulfilled_{reservation_id}",
                )
                markup.add(mark_button)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–ª–∏ –±–µ–∑
                if photo:
                    bot.send_photo(
                        chat_id=TARGET_GROUP_ID,
                        photo=photo,
                        caption=caption,
                        reply_markup=markup,
                    )
                else:
                    bot.send_message(
                        chat_id=TARGET_GROUP_ID, text=caption, reply_markup=markup
                    )

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ ID {reservation_id} –≤ –≥—Ä—É–ø–ø—É.")
            except Exception as e:
                bot.send_message(
                    user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID {reservation_id}: {e}"
                )
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ ID {reservation_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        bot.send_message(
            user_id, "‚úÖ –í—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É."
        )

    except Exception as global_error:
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {global_error}")
        print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_all_reserved_to_group: {global_error}")

# –•–µ—Ä–Ω—è —á—Ç–æ–±—ã –Ω–µ –º–æ–≥–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤ –ø–∞–∫–µ—Ç–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled_"))
def mark_fulfilled(call):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = call.from_user.id
    role = get_client_role(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if role != "admin":
        bot.answer_callback_query(
            call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏ –∏–∑ callback_data
        reservation_id = int(call.data.split("_")[2])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        reservation = Reservations.get_row_by_id(reservation_id)
        if not reservation:
            bot.answer_callback_query(call.id, "–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ
        if reservation.is_fulfilled:
            bot.answer_callback_query(
                call.id, "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.", show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ç–æ –ø–æ–ª–æ–∂–∏–ª)
        user_first_name = call.from_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        user_username = call.from_user.username
        user_who = (
            f"{user_first_name} (@{user_username})"
            if user_username
            else user_first_name
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏
        with Session(bind=engine) as session:
            reservation.is_fulfilled = True
            session.merge(reservation)
            session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
            remaining_reservations = (
                session.query(Reservations).filter_by(is_fulfilled=False).count()
            )

        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if remaining_reservations == 0:
            bot.delete_message(
                chat_id=call.message.chat.id, message_id=call.message.message_id
            )
            bot.answer_callback_query(
                call.id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        original_caption = (
            call.message.caption or call.message.text
        )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        updated_caption = (
            f"{original_caption}\n\n"
            f"‚úÖ –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
            f"üë§ –ö—Ç–æ –ø–æ–ª–æ–∂–∏–ª: {user_who}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (caption –∏–ª–∏ text)
        if call.message.photo:
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=updated_caption,
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=updated_caption,
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ–ª–æ–∂–µ–Ω
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π!")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ mark_fulfilled: {e}")

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –≥—Ä—É–ø–ø—ã –∏ –±–æ—Ç–∞
@bot.message_handler(commands=["sync_posts"])
def sync_posts_with_channel(message):
    role = get_client_role(message.chat.id)
    user_id = message.chat.id
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Posts
    posts = Posts.get_row_all()  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    deleted_posts = []

    for post in posts:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `post` –æ–±—ä–µ–∫—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        post_id = post.id  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ `post` ‚Äì –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        message_id = post.message_id  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å `message_id`

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.forward_message(
                chat_id=message.chat.id,
                from_chat_id=CHANNEL_ID,
                message_id=message_id
            )
        except ApiTelegramException:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_posts.append(post_id)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
    for post_id in deleted_posts:
        Posts.delete_row(post_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏

    bot.send_message(
        message.chat.id,
        f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(deleted_posts)}.",
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("clear_cart_"))
def clear_cart(call):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    client_id = int(call.data.split("_")[2])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_row, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
    client = Clients.get_row("clients", {"id": client_id})

    if not client:
        bot.send_message(call.message.chat.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id = client["user_id"]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_row –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ reservations
    Reservations.update_row("reservations", {"user_id": user_id},
               {"deleted": True})  # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–µ deleted –≤ True

    bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
def is_registered(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ clients.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ get_row –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    client = Clients.get_row(user_id=user_id)
    return client is not None
def set_user_state(user_id, state):
    user_states[user_id] = state
    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {state}")
def get_user_state(chat_id):
    state = user_states.get(chat_id, None)

    return state
def clear_user_state(user_id):
    if user_id in user_states:  # user_states, –≤–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        del user_states[user_id]
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ö–ª–∏–µ–Ω—Ç—ã"
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ö–ª–∏–µ–Ω—Ç—ã")
def manage_clients(message):
    user_id = message.chat.id
    role = get_client_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
def request_phone_last_digits(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–í—Å–µ', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
    )
    set_user_state(message.chat.id, "AWAITING_PHONE_LAST_4")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ "–í—Å–µ"
@bot.message_handler( func=lambda message: get_user_state(message.chat.id) == "AWAITING_PHONE_LAST_4")
def handle_phone_input_or_list_clients(message):
    input_text = message.text.strip()

    if input_text.lower() == "–≤—Å–µ":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        clients = Clients.get_row_all()

        if not clients:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            clear_user_state(message.chat.id)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
        for client in clients:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            total_orders = calculate_total_sum(client.user_id)
            processed_orders = calculate_processed_sum(client.user_id)

            bot.send_message(
                message.chat.id,
                f"–ò–º—è: {client.name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
                f"–†–æ–ª—å: {client.role}\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_orders} —Ä—É–±.\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {processed_orders} —Ä—É–±.",
            )

        clear_user_state(message.chat.id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –ï—Å–ª–∏ –≤–≤–æ–¥ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not input_text.isdigit() or len(input_text) != 4:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (4 —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ '–í—Å–µ'.",
        )
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 —Ü–∏—Ñ—Ä
    show_cart_by_last_phone_digits(message, input_text)


def show_cart_by_last_phone_digits(message, last_4_digits):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    client = Clients.get_row_by_phone_digits(last_4_digits)

    if not client:
        bot.send_message(
            message.chat.id,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        )
        clear_user_state(message.chat.id)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    total_orders = calculate_total_sum(client.user_id)
    processed_orders = calculate_processed_sum(client.user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –µ–≥–æ –∑–∞–∫–∞–∑–∞—Ö
    bot.send_message(
        message.chat.id,
        f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {client.name}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_orders} —Ä—É–±.\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {processed_orders} —Ä—É–±.",
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    reservations = Reservations.get_row_by_user_id(client.user_id)

    if not reservations:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞.")
    else:
        send_cart_content(message.chat.id, reservations)

    clear_user_state(message.chat.id)


# Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("view_cart_"))
def callback_view_cart(call):
    client_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = Clients.get_row(client_id)

    if not client:
        bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—å—é –∫–æ—Ä–∑–∏–Ω—É –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å
    bot.send_message(call.message.chat.id, f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {client.name}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    reservations = Reservations.get_row_by_user_id(client.user_id)

    if not reservations:
        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞.")
    else:
        send_cart_content(call.message.chat.id, reservations)


def send_cart_content(chat_id, reservations):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    for reservation in reservations:
        post = Posts.get_row_by_id(reservation.post_id)

        if post:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            if post.photo:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                bot.send_photo(
                    chat_id,
                    photo=post.photo,
                    caption=(
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {post.description}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {reservation.quantity}\n"
                        f"–°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if reservation.is_fulfilled else '–í –æ–∂–∏–¥–∞–Ω–∏–∏'}"
                    ),
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Ç–µ–∫—Å—Ç–æ–º
                bot.send_message(
                    chat_id,
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {post.description}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {reservation.quantity}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if reservation.is_fulfilled else '–í –æ–∂–∏–¥–∞–Ω–∏–∏'}",
                )
        else:
            bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä —Å ID {reservation.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def delete_client_by_phone(message):
    user_id = message.chat.id
    role = get_client_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    set_user_state(message.chat.id, "DELETE_CLIENT_PHONE")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "DELETE_CLIENT_PHONE")
def process_delete_client_phone(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    phone = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    protected_user_id = 5411051275  # ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = Clients.get_row_by_phone(phone)

        if client:
            client_user_id = client.user_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if client_user_id == protected_user_id:
                bot.send_message(
                    user_id, f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –∑–∞—â–∏—â–µ–Ω –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è."
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω)
            if client_user_id != protected_user_id:
                BlackList.insert(user_id=client_user_id, phone=phone)

            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã reservations
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            with Session(bind=engine) as session:
                deleted_reservations_count = session.query(Reservations).filter(
                    Reservations.user_id == client_user_id
                ).delete()
                session.commit()

            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
            Clients.delete_row(client.id)

            bot.send_message(
                user_id,
                f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. "
                f"–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ reservations —É–¥–∞–ª–µ–Ω–æ: {deleted_reservations_count}.",
            )
        else:
            bot.send_message(user_id, f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        clear_user_state(user_id)

#–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã –ø–æ 4 –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–∏—Ñ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–î–æ–¥–µ–ª–∞—Ç—å)


# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_worker_") or call.data.startswith("set_client_"))
def handle_set_role(call):
    client_id = int(call.data.split("_")[2])
    new_role = "worker" if "set_worker" in call.data else "client"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID (–∏—Å–ø–æ–ª—å–∑—É–µ–º get_row)
    client = Clients.get_row("clients", {"id": client_id})

    if not client:
        bot.answer_callback_query(call.id, f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º update_row)
    update_result = Clients.update_row("clients", {"role": new_role}, {"id": client_id})

    if update_result:
        bot.answer_callback_query(call.id, f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
        bot.send_message(
            call.message.chat.id,
            f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {client_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}.",
        )
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    role = get_client_role(user_id)
    return role == "admin"

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_client_"))
def handle_edit_client(call):
    client_id = int(call.data.split("_")[2])
    temp_user_data[call.from_user.id] = {"client_id": client_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞

    # –í—ã–≤–æ–¥–∏–º –≤—ã–±–æ—Ä, —á—Ç–æ –º–µ–Ω—è—Ç—å
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone"),
    )
    bot.send_message(
        call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ (–∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
@bot.callback_query_handler(func=lambda call: call.data in ["edit_name", "edit_phone"])
def handle_edit_choice(call):
    user_id = call.from_user.id

    if call.data == "edit_name":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        set_user_state(user_id, "EDITING_NAME")
    elif call.data == "edit_phone":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        set_user_state(user_id, "EDITING_PHONE")

# –ù–æ–≤—ã–π –ø–æ—Å—Ç
@bot.message_handler(func=lambda message: message.text == "‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")
def create_new_post(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    if role not in ["worker", "admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(
        message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞."
    )
    temp_post_data[message.chat.id] = {}
    set_user_state(message.chat.id, UserState.CREATING_POST)

# –§–æ—Ç–æ
@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.chat.id
    role = get_client_role(user_id)
    state = get_user_state(message.chat.id)
    if role not in ["worker", "admin"]:
        bot.send_message(
            user_id, "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        )
        return
    if state == UserState.CREATING_POST:
        temp_post_data[message.chat.id]["photo"] = message.photo[-1].file_id
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")

# –û–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.CREATING_POST)
def handle_post_details(message):
    chat_id = message.chat.id
    if "photo" in temp_post_data[chat_id] and "price" not in temp_post_data[chat_id]:
        if not message.text.isdigit():
            bot.send_message(
                chat_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        temp_post_data[chat_id]["price"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    elif (
        "price" in temp_post_data[chat_id]
        and "description" not in temp_post_data[chat_id]
    ):
        temp_post_data[chat_id]["description"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")
    elif (
        "description" in temp_post_data[chat_id]
        and "quantity" not in temp_post_data[chat_id]
    ):
        if not message.text.isdigit():
            bot.send_message(
                chat_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        temp_post_data[chat_id]["quantity"] = int(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        data = temp_post_data[chat_id]
        save_post(
            chat_id, data["photo"], data["price"], data["description"], data["quantity"]
        )
        bot.send_message(chat_id, "–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        clear_user_state(chat_id)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
@bot.message_handler(func=lambda message: message.text == "üìÑ –ü–æ—Å—Ç—ã")
def manage_posts(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
    if role not in ["admin", "worker"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª
        posts = Posts.get_unsent_posts()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_unsent_posts –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    except Exception as e:
        bot.send_message(user_id, f"–ü–∏–∑–¥–∞ –ø–æ—Å—Ç–∞–º: {e}")
        return

    if not posts:
        bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ
    for post in posts:
        post_id = post.id
        description = post.description
        price = post.price
        quantity = post.quantity
        photo = post.photo  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º
        markup = InlineKeyboardMarkup()
        edit_btn = InlineKeyboardButton(
            "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}"
        )
        delete_btn = InlineKeyboardButton(
            "üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post_id}"
        )
        markup.add(edit_btn, delete_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
        try:
            if photo:
                bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=f"**–ü–æ—Å—Ç #{post_id}:**\n"
                            f"üìç *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                            f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                            f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}",
                    parse_mode="Markdown",
                    reply_markup=markup,
                )
            else:
                bot.send_message(
                    chat_id=user_id,
                    text=f"**–ü–æ—Å—Ç #{post_id}:**\n"
                         f"üìç *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                         f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                         f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}",
                    parse_mode="Markdown",
                    reply_markup=markup,
                )
        except Exception as e:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ #{post_id}: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_post_"))
def delete_post_handler(call):
    post_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞
    try:
        # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ)
        result, msg = Posts.delete_row(post_id=post_id)
        if result:
            # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            bot.answer_callback_query(call.id, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–º)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            # –í–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {msg}")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    markup = admin_main_menu()
    bot.send_message(
        message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda message: message.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª")
def send_new_posts_to_channel(message):
    user_id = message.chat.id
    role = get_client_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–æ–≤
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_first_name = message.chat.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª
    posts = Posts.get_unsent_posts()

    if posts:
        for post in posts:
            post_id = post.id
            photo = post.photo
            price = post.price
            description = post.description
            quantity = post.quantity
            caption = f"–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Å—Ç–∞—Ç–æ–∫: {quantity}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            markup = InlineKeyboardMarkup()
            reserve_btn = InlineKeyboardButton(
                "üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{post_id}"
            )
            to_bot_button = InlineKeyboardButton(
                "–í –±–æ—Ç–∞", url="https://t.me/MegaSkidkiTgBot?start=start"
            )
            markup.add(reserve_btn, to_bot_button)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
            sent_message = bot.send_photo(
                CHANNEL_ID, photo=photo, caption=caption, reply_markup=markup
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            group_caption = (
                f"–ü–æ—Å—Ç –±—ã–ª –≤—ã–ª–æ–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_first_name}\n\n{caption}"
            )
            bot.send_photo(-1002330057848, photo=photo, caption=group_caption)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            Posts.mark_as_sent(post_id=post_id, message_id=sent_message.message_id)

        bot.send_message(
            user_id,
            f"‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã ({len(posts)}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É.",
        )
    else:
        bot.send_message(user_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ç–∞
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_NAME)
def register_name(message):
    user_id = message.chat.id
    temp_user_data[user_id]["name"] = message.text
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    set_user_state(user_id, UserState.REGISTERING_PHONE)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_post_"))
def edit_post(call):
    post_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    role = get_client_role(user_id)
    if role not in ["admin", "worker"]:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            show_alert=True,
        )
        return

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_post_data[user_id] = {"post_id": post_id}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    message_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ—Å—Ç–∞:"
    if call.message.text:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
        )
    else:
        msg_sent = bot.send_message(chat_id=call.message.chat.id, text=message_text)
        temp_post_data[user_id]["bot_message_id"] = msg_sent.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, UserState.EDITING_POST)

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.EDITING_POST)
def edit_post_details(message):
    user_id = message.chat.id
    post_id = temp_post_data[user_id].get("post_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞
    if "last_message_id" in temp_post_data[user_id]:
        try:
            bot.delete_message(
                chat_id=user_id, message_id=temp_post_data[user_id]["last_message_id"]
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    if "bot_message_id" in temp_post_data[user_id]:
        try:
            bot.delete_message(
                chat_id=user_id, message_id=temp_post_data[user_id]["bot_message_id"]
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –µ—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
    if "price" not in temp_post_data[user_id]:
        if not message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ - —ç—Ç–æ —á–∏—Å–ª–æ
            error_msg = bot.send_message(
                user_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            temp_post_data[user_id]["bot_message_id"] = error_msg.message_id
            return

        temp_post_data[user_id]["price"] = int(message.text)
        msg = bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.")
        temp_post_data[user_id]["bot_message_id"] = msg.message_id
        temp_post_data[user_id]["last_message_id"] = message.message_id

    elif "description" not in temp_post_data[user_id]:
        temp_post_data[user_id]["description"] = message.text
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")
        temp_post_data[user_id]["bot_message_id"] = msg.message_id
        temp_post_data[user_id]["last_message_id"] = message.message_id

    elif "quantity" not in temp_post_data[user_id]:
        if not message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —ç—Ç–æ —á–∏—Å–ª–æ
            error_msg = bot.send_message(
                user_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            temp_post_data[user_id]["bot_message_id"] = error_msg.message_id
            return

        temp_post_data[user_id]["quantity"] = int(message.text)
        data = temp_post_data[user_id]

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ Posts.update_row –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ
            success, msg = Posts.update_row(
                post_id=post_id,
                price=data["price"],
                description=data["description"],
                quantity=data["quantity"],
            )

            if success:
                confirmation_msg = bot.send_message(user_id, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
                temp_post_data[user_id]["bot_message_id"] = confirmation_msg.message_id
                del temp_post_data[user_id]  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                clear_user_state(user_id)
            else:
                bot.send_message(user_id, f"–û—à–∏–±–∫–∞: {msg}")

        except Exception as e:
            bot.send_message(
                user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}"
            )

@bot.message_handler(commands=['statistic'])
def handle_statistic_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistic."""
    chat_id = message.chat.id

    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    statistics = calculate_user_statistics(chat_id)

    username = statistics.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    post_count_week = statistics.get("post_count", 0)
    active_days = statistics.get("active_days", 0)
    post_count_today = statistics.get("post_count_today", 0)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è: {username}\n"
        f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {post_count_week}\n"
        f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {post_count_today}\n"
        f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {active_days}"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
    # pizdec
