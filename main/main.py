import os
import re

import telebot
import sqlite3

from .bot import admin_main_menu, client_main_menu, worker_main_menu, unknown_main_menu
from math import ceil
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ReplyKeyboardMarkup, \
    KeyboardButton
from database.config import TOKEN, CHANNEL_ID, ADMIN_CHAT_ID, TARGET_GROUP_ID
from telebot.apihelper import ApiTelegramException
from database.database import init_db
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
user_messages = {}
user_pages = {}
PAGE_SIZE = 5
user_last_message_id = {}
last_bot_message = {}
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
db_path = Path("MegaBot") / "bot_database.db"
init_db()


# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def save_post(chat_id, photo, price, description, quantity):
    if not price.isdigit() or not str(quantity).isdigit():
        raise ValueError("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO posts (chat_id, photo, price, description, quantity, is_sent) VALUES (?, ?, ?, ?, ?, ?)',
        (chat_id, photo, price, description, quantity, 0))  # is_sent –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
    conn.commit()
    conn.close()

def save_reservation(user_id, post_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO reservations (user_id, post_id) VALUES (?, ?)', (user_id, post_id))
    conn.commit()
    conn.close()

def set_user_role(user_id, role):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('REPLACE INTO clients (user_id, role) VALUES (?, ?)', (user_id, role))
    conn.commit()
    conn.close()

def get_user_role(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT role FROM clients WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

@bot.message_handler(commands=["unsent_posts"])
def list_unsent_posts(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    if role not in ["admin", "worker"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    cursor.execute('SELECT id, price, description, quantity FROM posts WHERE is_sent = 0')
    unsent_posts = cursor.fetchall()
    conn.close()

    if unsent_posts:
        response = "üìÆ –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
        for post in unsent_posts:
            post_id, price, description, quantity = post
            response += f"ID: {post_id} | –¶–µ–Ω–∞: {price}‚ÇΩ | –û–ø–∏—Å–∞–Ω–∏–µ: {description} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, "‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id
    role = get_user_role(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    greetings = {
        "client": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É.",
        "worker": "–î–∞–≤–∞–π –∑–∞ —Ä–∞–±–æ—Ç—É!",
        "admin": "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å!",
    }
    greeting = greetings.get(role, "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—à—É –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–æ–ª–∏ —Å –¥–µ—Ñ–æ–ª—Ç–æ–º

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–æ–ª–∏
    if role == "admin":
        markup = admin_main_menu()  # reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    elif role == "client":
        markup = client_main_menu()  # reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    elif role == "worker":
        markup = worker_main_menu()  # reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    else:
        markup = unknown_main_menu()  # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ä–æ–ª–∏

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ edit_message_text –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    try:
        if user_id in last_bot_message:  # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=user_id, message_id=last_bot_message[user_id])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = bot.send_message(user_id, greeting, reply_markup=markup)
        last_bot_message[user_id] = sent_message.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø—Ä–æ—Å /start)
    try:
        bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@bot.message_handler(func=lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def registration_button(message):
    chat_id = message.chat.id
    if is_user_blacklisted(chat_id):
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
        try:
            if chat_id in last_bot_message:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.delete_message(chat_id=chat_id, message_id=last_bot_message[chat_id])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = bot.send_message(chat_id, text, reply_markup=None)
            last_bot_message[chat_id] = sent_message.message_id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if is_user_registered(chat_id):
        text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"
        markup = None  # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω—É–∂–Ω–∞
    else:
        user_data[chat_id] = {}
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Ä–∞–∑–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        markup = None  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

    try:
        if chat_id in last_bot_message:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=chat_id, message_id=last_bot_message[chat_id])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = bot.send_message(chat_id, text, reply_markup=markup)
        last_bot_message[chat_id] = sent_message.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@bot.message_handler(func=lambda message: message.chat.id in user_data and 'name' not in user_data[message.chat.id])
def handle_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    markup = None  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    try:
        if chat_id in last_bot_message:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(chat_id=chat_id, message_id=last_bot_message[chat_id])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = bot.send_message(chat_id, text, reply_markup=markup)
        last_bot_message[chat_id] = sent_message.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@bot.message_handler(func=lambda message: message.chat.id in user_data and 'phone' not in user_data[message.chat.id])
def handle_phone(message):
    chat_id = message.chat.id
    raw_phone = message.text
    cleaned_phone = re.sub(r'\D', '', raw_phone)  # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(cleaned_phone) == 11 and (cleaned_phone.startswith('8') or cleaned_phone.startswith('7')):
        if cleaned_phone.startswith('7'):
            cleaned_phone = '8' + cleaned_phone[1:]
        user_data[chat_id]['phone'] = cleaned_phone
        name = user_data[chat_id]['name']
        confirmation_text = f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {cleaned_phone} —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
        text = confirmation_text
    else:
        text = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8 –∏–ª–∏ +7. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."



    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–µ—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)
    if 'phone' in user_data[chat_id]:
        save_user(name, cleaned_phone, chat_id)
        handle_start(message)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
def is_user_blacklisted(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM black_list WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM clients WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É —Å user_id
def save_user(name, phone, user_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å: "admin" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ user_id, –∏–Ω–∞—á–µ "client"
    role = "admin" if user_id == 5411051275 else "client"  # –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º —Ä–æ–ª–∏
    cursor.execute("INSERT INTO clients (name, phone, user_id, role) VALUES (?, ?, ?, ?)", (name, phone, user_id, role))
    conn.commit()
    conn.close()
    return handle_start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É —Å user_id
def save_user(name, phone, user_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()


    role = "admin" if user_id == 5411051275 else "client"  # –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º —Ä–æ–ª–∏
    cursor.execute("INSERT INTO clients (name, phone, user_id, role) VALUES (?, ?, ?, ?)", (name, phone, user_id, role))
    conn.commit()
    conn.close()
    
@bot.message_handler(commands=["setrole"])
def set_role_command(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    if role != "admin":
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/setrole user_id role"
        _, target_user_id, role = message.text.split()
        target_user_id = int(target_user_id)

        if role not in ["client", "worker", "admin"]:
            bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ client, worker –∏–ª–∏ admin.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        set_user_role(target_user_id, role)
        bot.send_message(user_id, f"–†–æ–ª—å {role} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setrole user_id role")
    except Exception as e:
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("reserve_"))
def handle_reservation(call):
    post_id = int(call.data.split("_")[1])
    user_id = call.from_user.id

    if not is_registered(user_id):
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –í –±–æ—Ç–∞",
            show_alert=True
        )
    else:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT quantity, message_id, price, description FROM posts WHERE id = ?', (post_id,))
        result = cursor.fetchone()

        if not result:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        current_quantity, message_id, price, description = result  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        if current_quantity == 0:
            bot.answer_callback_query(
                callback_query_id=call.id,
                text="–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!",
                show_alert=True
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cursor.execute('INSERT INTO reservations (user_id, post_id) VALUES (?, ?)', (user_id, post_id))

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1
            new_quantity = current_quantity - 1
            cursor.execute('UPDATE posts SET quantity = ? WHERE id = ?', (new_quantity, post_id))
            conn.commit()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_caption = f"–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Å—Ç–∞—Ç–æ–∫: {new_quantity}"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è)
            try:
                bot.edit_message_caption(
                    chat_id=CHANNEL_ID,
                    message_id=message_id,
                    caption=new_caption,
                    reply_markup=call.message.reply_markup  # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π
                )
            except Exception as e:
                bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ. –û—à–∏–±–∫–∞: {e}")

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä—É—é—â–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if new_quantity == 0:
                bot.answer_callback_query(
                    callback_query_id=call.id,
                    text="–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–≤–∞—Ä–∞!",
                    show_alert=True
                )


def delete_previous_messages(user_id, user_request_id=None):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    –∞ —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –µ–≥–æ ID.
    """
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if user_request_id:
        try:
            bot.delete_message(chat_id=user_id, message_id=user_request_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º
    if user_id in user_messages:
        try:
            for msg_id in user_messages[user_id]:
                bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞: {e}")
        finally:
            user_messages[user_id] = []  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

def get_user_reservations(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–ª—è–µ–º is_fulfilled –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    cursor.execute('''
        SELECT posts.description, posts.price, posts.photo, COUNT(reservations.post_id) AS quantity, reservations.is_fulfilled
        FROM reservations
        JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = ?
        GROUP BY posts.description, posts.price, posts.photo, reservations.is_fulfilled
    ''', (user_id,))
    results = cursor.fetchall()
    conn.close()
    return results

@bot.message_handler(commands=["my_reservations"])
def show_reservations(message):
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not is_registered(user_id):
        msg = bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start register.")
        user_messages[user_id] = [msg.message_id]
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reservations = get_user_reservations(user_id)

    if reservations:
        for idx, (description, price, photo, quantity, is_fulfilled) in enumerate(reservations, start=1):
            status = "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–æ" if is_fulfilled else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = (
                f"{idx}. –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ x {quantity}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )

            if photo:
                try:
                    sent_photo = bot.send_photo(user_id, photo=photo, caption=caption)
                    user_messages.setdefault(user_id, []).append(sent_photo.message_id)
                except Exception as e:
                    bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_post_"))
def handle_delete_post(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ ID.
    –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —É–¥–∞–ª—è–µ—Ç —Ç–∞–∫–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.
    """
    try:
        post_id = int(call.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM posts WHERE id = ?", (post_id,))
        if cursor.rowcount > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–¥–∞–ª—ë–Ω –ø–æ—Å—Ç
            conn.commit()

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–µ
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.answer_callback_query(call.id, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", show_alert=False)
        else:
            bot.answer_callback_query(call.id, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

        conn.close()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–∫–∞–∑
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def order_details(call):
    reservation_id = call.data.split("_")[1]
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    cursor.execute("""
        SELECT posts.photo, posts.description, posts.price, posts.quantity, reservations.is_fulfilled
        FROM reservations
        INNER JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.id = ?
    """, (reservation_id,))
    order = cursor.fetchone()
    conn.close()
    if order:
        photo, description, price, quantity, is_fulfilled = order
        status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        caption = (
            f"–¢–æ–≤–∞—Ä: {description}\n"
            f"–¶–µ–Ω–∞: {price}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        markup = InlineKeyboardMarkup()
        back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders")  # callback_data –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        markup.add(back_btn)
        if not is_fulfilled:
            cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"cancel_{reservation_id}")
            markup.add(cancel_btn)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        bot.edit_message_media(
            media=InputMediaPhoto(media=photo, caption=caption),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
@bot.callback_query_handler(func=lambda call: call.data == "my_orders")
def show_my_orders(call):
    message = call.message
    my_orders(message)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ my_orders, –ø–µ—Ä–µ–¥–∞–≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


@bot.message_handler(func=lambda message: message.text == "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    user_id = message.chat.id
    name = message.from_user.first_name
    message_id = message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT reservations.id, posts.description, reservations.is_fulfilled, posts.price
        FROM reservations
        INNER JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = ?
    """, (user_id,))
    orders = cursor.fetchall()
    conn.close()

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(chat_id=user_id, message_id=message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}. user_id: {user_id}, message_id: {message_id}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        if user_id in user_last_message_id:
            bot.delete_message(chat_id=user_id, message_id=user_last_message_id[user_id])
    except Exception as e:
        print(
            f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Ç—Ä–æ–∫–∞ –æ—à–∏–±–∫–∏ -533-: {e}. Id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: {user_id}, –ò–º—è {name}")

    # –û—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–∫–∞–∑–æ–≤
    if orders:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_pages[user_id] = 0
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        new_message = send_order_page(
            user_id,
            message_id=None,
            orders=orders,
            page=user_pages[user_id]
        )
        user_last_message_id[user_id] = new_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        to_channel_button = InlineKeyboardButton(text="–ù–∞ –∫–∞–Ω–∞–ª", url="https://t.me/mgskidkitest")
        keyboard.add(to_channel_button)
        new_message = bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π–¥—è –ù–∞ –∫–∞–Ω–∞–ª",
                                       reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_last_message_id[user_id] = new_message.message_id


def send_order_page(user_id, message_id, orders, page):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    total_pages = ceil(len(orders) / PAGE_SIZE)
    start_idx = page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤
    try:
        total_sum = sum(int(order[3]) for order in orders if order[3] is not None)
    except ValueError:
        total_sum = 0
        print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–º–º—ã.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    orders_markup = InlineKeyboardMarkup(row_width=1)
    for order in orders[start_idx:end_idx]:
        reservation_id, description, is_fulfilled, price = order
        status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        details_button = InlineKeyboardButton(
            text=f"{price} ‚ÇΩ - {description} ({status})",
            callback_data=f"order_{reservation_id}"
        )
        orders_markup.add(details_button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    if page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next_page"))
    if navigation_buttons:
        orders_markup.row(*navigation_buttons)

    # –û–±—â–∞—è —Å—É–º–º–∞
    orders_markup.add(
        InlineKeyboardButton(f"üßæ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} ‚ÇΩ.", callback_data="total_sum")
    )

    photo_placeholder = open("../images/my_cart.jpg", "rb")  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ

    if message_id:
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=InputMediaPhoto(
                photo_placeholder,
                caption=f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):"
            ),
            reply_markup=orders_markup
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = bot.send_photo(
            chat_id=user_id,
            photo=photo_placeholder,
            caption=f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):",
            reply_markup=orders_markup
        )
        return msg

@bot.callback_query_handler(func=lambda call: call.data in ["next_page","prev_page"])
def paginate_orders(call):
    user_id = call.message.chat.id
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT reservations.id, posts.description, reservations.is_fulfilled, posts.price
        FROM reservations
        INNER JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = ?
    """, (user_id,))
    orders = cursor.fetchall()
    conn.close()

    if not isinstance(orders, list):
        orders = []  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        print("–û—à–∏–±–∫–∞: 'orders' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")


    if user_id not in user_pages:
        user_pages[user_id] = 0


    if call.data == "next_page" and user_pages[user_id] < ceil(len(orders) / PAGE_SIZE) - 1:
        user_pages[user_id] += 1
    elif call.data == "prev_page" and user_pages[user_id] > 0:
        user_pages[user_id] -= 1


    send_order_page(
        user_id=user_id,
        message_id=call.message.message_id,
        orders=orders,
        page=user_pages[user_id]
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_"))
def cancel_reservation(call):
    try:
        user_id = call.from_user.id
        reservation_id = int(call.data.split("_")[1])
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute("""
            SELECT reservations.post_id, posts.quantity, reservations.is_fulfilled
            FROM reservations
            JOIN posts ON reservations.post_id = posts.id
            WHERE reservations.id = ? AND reservations.user_id = ?
        """, (reservation_id, user_id))
        reservation = cursor.fetchone()
        if not reservation:
            bot.answer_callback_query(call.id, "–†–µ–∑–µ—Ä–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            conn.close()
            return
        post_id, current_quantity, is_fulfilled = reservation
        if is_fulfilled:
            bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            conn.close()
            return
        cursor.execute("DELETE FROM reservations WHERE id = ?", (reservation_id,))
        conn.commit()
        new_quantity = current_quantity + 1
        cursor.execute("UPDATE posts SET quantity = ? WHERE id = ?", (new_quantity, post_id))
        conn.commit()

        cursor.execute("SELECT message_id, description, price FROM posts WHERE id = ?", (post_id,))
        post_info = cursor.fetchone()
        conn.close()

        if post_info:
            message_id, description, price = post_info
            caption = f"–¢–æ–≤–∞—Ä: {description}\n–¶–µ–Ω–∞: {price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity}"
            markup = InlineKeyboardMarkup()
            reserve_button = InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{post_id}")
            to_bot_button = InlineKeyboardButton("–í –±–æ—Ç–∞", url="https://t.me/MegaSkidkiTgBot?start=start")
            markup.add(reserve_button, to_bot_button)
            bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=message_id,
                caption=caption,
                reply_markup=markup
            )

        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–æ–≤–∞—Ä–∞.", show_alert=False)

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        my_orders(call.message)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)



@bot.callback_query_handler(func=lambda call: call.data.startswith("orders_page_"))
def change_orders_page(call):
    try:
        page = int(call.data.split("_")[2])
        update_user_orders_menu(call.message.chat.id, call.message.message_id, page=page)
        bot.answer_callback_query(call.id)
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤: {ex}")


def update_user_orders_menu(chat_id, message_id, page=0):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü
    """
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT reservations.id, posts.description, reservations.is_fulfilled
            FROM reservations
            INNER JOIN posts ON reservations.post_id = posts.id
            WHERE reservations.user_id = ?
        """, (chat_id,))
        orders = cursor.fetchall()
        conn.close()

        total_orders = len(orders)
        start_index = page * PAGE_SIZE
        end_index = start_index + PAGE_SIZE
        current_orders = orders[start_index:end_index]
        total_pages = ceil(len(orders) / PAGE_SIZE)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        orders_markup = InlineKeyboardMarkup(row_width=1)
        for order in current_orders:
            reservation_id, description, is_fulfilled = order
            status = "‚úîÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω" if is_fulfilled else "‚åõ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            details_button = InlineKeyboardButton(
                text=f"{description} ({status})",
                callback_data=f"order_{reservation_id}"
            )
            orders_markup.add(details_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_page_{page - 1}"))
        if end_index < total_orders:
            navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"orders_page_{page + 1}"))

        if navigation_buttons:
            orders_markup.row(*navigation_buttons)

        # –ó–∞–≥–ª—É—à–∫–∞ —Å —Ñ–æ—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if current_orders:
            photo_placeholder = open("../images/my_cart.jpg", "rb")  # –°–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
            bot.edit_message_media(
                media=InputMediaPhoto(media=photo_placeholder, caption=f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):"),
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=orders_markup
            )
            photo_placeholder.close()
        else:
            return my_orders
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤: {ex}")


@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
def forward_reserved_posts(message):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    cursor.execute('''
           SELECT posts.photo, posts.price, posts.description, clients.name
           FROM reservations
           JOIN posts ON reservations.post_id = posts.id
           JOIN clients ON reservations.user_id = clients.user_id
       ''')
    reserved_posts = cursor.fetchall()
    conn.close()

    if reserved_posts:
        for post in reserved_posts:
            photo, price, description, client_name = post
            caption = f"–¶–µ–Ω–∞: {price}‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {client_name}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            bot.send_photo(TARGET_GROUP_ID, photo=photo, caption=caption)
        bot.send_message(message.chat.id, "–í—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

@bot.message_handler(func=lambda message: message.text == "üì¶ –ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
def send_all_reserved_to_group(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            SELECT reservations.id, posts.photo, posts.price, posts.description, clients.name, clients.phone
            FROM reservations
            JOIN posts ON reservations.post_id = posts.id
            JOIN clients ON reservations.user_id = clients.user_id
            WHERE reservations.is_fulfilled = 0
        ''')
        reserved_items = cursor.fetchall()

        if reserved_items:
            for item in reserved_items:
                reservation_id, photo, price, description, client_name, client_phone = item
                caption = f"üíº –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\nüë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\nüì¶ –û–ø–∏—Å–∞–Ω–∏–µ: {description}"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                markup = InlineKeyboardMarkup()
                mark_button = InlineKeyboardButton(
                    text="‚úÖ –ü–æ–ª–æ–∂–∏–ª",
                    callback_data=f"delete_msg_{reservation_id}"  # –ü–µ—Ä–µ–¥–∞—ë–º ID —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ callback_data
                )
                markup.add(mark_button)

                if photo:
                    bot.send_photo(chat_id=TARGET_GROUP_ID, photo=photo, caption=caption, reply_markup=markup)
                else:
                    bot.send_message(chat_id=TARGET_GROUP_ID, text=caption, reply_markup=markup)

            bot.send_message(user_id, "–í—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.")
        else:
            bot.send_message(user_id, "–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_msg_"))
def delete_message_from_group(call):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = call.from_user.id
    role = get_user_role(user_id)

    if role != "admin":
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏
    reservation_id = int(call.data.split("_")[2])

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE reservations SET is_fulfilled = 1 WHERE id = ?', (reservation_id,))
        conn.commit()
        conn.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        )
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled_"))
def mark_fulfilled(call):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = call.from_user.id
    role = get_user_role(user_id)

    if role != "admin":
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏
    reservation_id = int(call.data.split("_")[2])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE reservations SET is_fulfilled = 1 WHERE id = ?', (reservation_id,))
    conn.commit()
    conn.close()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.")
    bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_cart_"))
def view_cart(call):
    client_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('''
        SELECT reservations.id, posts.description, posts.price, reservations.is_fulfilled
        FROM reservations
        JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = (SELECT user_id FROM clients WHERE id = ?)
    ''', (client_id,))
    cart_items = cursor.fetchall()
    conn.close()

    if cart_items:
        for reservation_id, description, price, is_fulfilled in cart_items:
            status = "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–æ" if is_fulfilled else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            details = f"{description} - {price}‚ÇΩ\n–°—Ç–∞—Ç—É—Å: {status}"

            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–æ–∂–µ–Ω–æ" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            markup = InlineKeyboardMarkup()
            if not is_fulfilled:
                markup.add(InlineKeyboardButton("‚úÖ –ü–æ–ª–æ–∂–µ–Ω–æ", callback_data=f"mark_fulfilled_{reservation_id}"))

            bot.send_message(call.message.chat.id, details, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled_"))
def mark_fulfilled(call):
    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    reservation_id = int(call.data.split("_")[2])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE reservations SET is_fulfilled = 1 WHERE id = ?', (reservation_id,))
    conn.commit()
    conn.close()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.")
    bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")



@bot.message_handler(commands=['sync_posts'])
def sync_posts_with_channel(message):
    role = get_user_role(message.chat.id)
    user_id = message.chat.id
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, message_id FROM posts')
    posts = cursor.fetchall()

    deleted_posts = []
    for post_id, message_id in posts:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.forward_message(chat_id=message.chat.id, from_chat_id=CHANNEL_ID, message_id=message_id)
        except ApiTelegramException:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_posts.append(post_id)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
    for post_id in deleted_posts:
        cursor.execute('DELETE FROM posts WHERE id = ?', (post_id,))

    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(deleted_posts)}.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled"))
def mark_fulfilled(call):
    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    reservation_id = int(call.data.split("_")[2])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE reservations SET is_fulfilled = 1 WHERE id = ?', (reservation_id,))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.")
    bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")

def get_user_reservations_split(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    cursor.execute('''
        SELECT posts.description, posts.price, reservations.is_fulfilled
        FROM reservations
        JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = ?
    ''', (user_id,))
    results = cursor.fetchall()
    conn.close()

    ordered = [r for r in results if not r[2]]  # is_fulfilled = 0
    fulfilled = [r for r in results if r[2]]  # is_fulfilled = 1
    return ordered, fulfilled

@bot.callback_query_handler(func=lambda call: call.data.startswith("clear_cart_"))
def clear_cart(call):
    client_id = int(call.data.split("_")[2])

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('''
        DELETE FROM reservations
        WHERE user_id = (SELECT user_id FROM clients WHERE id = ?)
    ''', (client_id,))
    conn.commit()
    conn.close()

    bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")

def get_all_posts():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç chat_id
    cursor.execute('SELECT id, chat_id, photo, price, description, quantity FROM posts')
    results = cursor.fetchall()
    conn.close()
    return results

def update_post(post_id, price, description, quantity):
    if not price.isdigit() or not str(quantity).isdigit():
        raise ValueError("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE posts SET price = ?, description = ?, quantity = ? WHERE id = ?',
                   (price, description, quantity, post_id))
    conn.commit()
    conn.close()

def is_registered(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM clients WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def register_client(user_id, name, phone):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ä–æ–ª—å—é 'client' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–æ–ª—å—é 'client'
    cursor.execute('''
        INSERT OR IGNORE INTO clients (user_id, name, phone, role) 
        VALUES (?, ?, ?, ?)
    ''', (user_id, name, phone, 'client'))

    conn.commit()
    conn.close()

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_PHONE)
def register_phone(message):
    user_id = message.chat.id
    phone = message.text
    name = temp_user_data[user_id]["name"]

    register_client(user_id, name, phone)  # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    bot.send_message(user_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}, —Ç–µ–ª–µ—Ñ–æ–Ω {phone}, —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.")
    clear_user_state(user_id)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states = {}
temp_user_data = {}
temp_post_data = {}

class UserState:
    REGISTERING_NAME = 1
    REGISTERING_PHONE = 2
    CREATING_POST = 3
    EDITING_POST = 4

def set_user_state(user_id, state):
    user_states[user_id] = state

def get_user_state(user_id):
    return user_states.get(user_id, None)

def clear_user_state(user_id):
    user_states.pop(user_id, None)
    temp_user_data.pop(user_id, None)
    temp_post_data.pop(user_id, None)

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ö–ª–∏–µ–Ω—Ç—ã")
def manage_clients(message):
    user_id = message.chat.id
    role = get_user_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def delete_client_by_phone(message):
    user_id = message.chat.id
    role = get_user_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    set_user_state(message.chat.id, "DELETE_CLIENT_PHONE")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "DELETE_CLIENT_PHONE")
def process_delete_client_phone(message):
    user_id = message.chat.id
    role = get_user_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    phone = message.text
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    protected_user_id = 5411051275

    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients
        cursor.execute("SELECT user_id FROM clients WHERE phone = ?", (phone,))
        user_data = cursor.fetchone()
        if user_data:
            user_id = user_data[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if user_id == protected_user_id:
                bot.send_message(
                    message.chat.id,
                    f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –Ω–µ —Ö–æ—á–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
                )
                return

            cursor.execute("INSERT INTO black_list (user_id, phone) VALUES (?, ?)", (user_id, phone))
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ reservations
            cursor.execute("DELETE FROM reservations WHERE user_id = ?", (user_id,))
            deleted_reservations = cursor.rowcount
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ clients
            cursor.execute("DELETE FROM clients WHERE phone = ?", (phone,))
            deleted_clients = cursor.rowcount
            conn.commit()
            bot.send_message(
                message.chat.id,
                f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. "
                f"–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ reservations —É–¥–∞–ª–µ–Ω–æ: {deleted_reservations}."
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
    except sqlite3.Error as e:
        conn.rollback()
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        )
    finally:
        conn.close()
    clear_user_state(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
def search_client_by_phone(message):
    user_id = message.chat.id
    role = get_user_role(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    set_user_state(message.chat.id, "SEARCH_CLIENT")


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "SEARCH_CLIENT")
def handle_client_search(message):
    search_query = message.text.strip()

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    if search_query.lower() == "–≤—Å–µ":  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "–í—Å–µ" (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        cursor.execute('''
            SELECT id, name, phone FROM clients
        ''')
        clients = cursor.fetchall()
        conn.close()

        if clients:
            for client_id, name, phone in clients:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                total_sum, fulfilled_sum = calculate_sums_for_client(client_id)
                info = (
                    f"üë§ –ò–º—è: {name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üßæ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} ‚ÇΩ\n"
                    f"üè∑Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É: {fulfilled_sum}‚ÇΩ"
                )
                markup = InlineKeyboardMarkup()
                view_cart_button = InlineKeyboardButton("üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"view_cart_{client_id}")
                disbandment_button = InlineKeyboardButton("–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"clear_cart_{client_id}")
                markup.add(view_cart_button,disbandment_button)
                bot.send_message(message.chat.id, info, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ "–í—Å–µ", –∏—â–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º –Ω–æ–º–µ—Ä–∞
        if not search_query.isdigit() or len(search_query) != 4:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ª–æ–≤–æ '–í—Å–µ'.")
            return

        cursor.execute('''
            SELECT id, name, phone FROM clients WHERE phone LIKE ?
        ''', (f"%{search_query}",))
        clients = cursor.fetchall()
        conn.close()

        if clients:
            for client_id, name, phone in clients:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                total_sum, fulfilled_sum = calculate_sums_for_client(client_id)
                info = (
                    f"üë§ –ò–º—è: {name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_sum}‚ÇΩ\n"
                    f"üè∑Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É: {fulfilled_sum}‚ÇΩ"
                )
                markup = InlineKeyboardMarkup()
                view_cart_button = InlineKeyboardButton("üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"view_cart_{client_id}")
                disbandment_button = InlineKeyboardButton("–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"clear_cart_{client_id}")
                markup.add(view_cart_button,disbandment_button)
                bot.send_message(message.chat.id, info, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ö–ª–∏–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    clear_user_state(message.chat.id)

def calculate_sums_for_client(client_id):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id FROM clients WHERE id = ?', (client_id,))
    user_id = cursor.fetchone()

    if not user_id:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏
        return 0, 0

    user_id = user_id[0]  # –ò–∑–≤–ª–µ—á—å id

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
        SELECT SUM(posts.price), 
               SUM(CASE WHEN reservations.is_fulfilled = 1 THEN posts.price ELSE 0 END)
        FROM reservations
        JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    total_sum = result[0] or 0  # –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    fulfilled_sum = result[1] or 0  # –°—É–º–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    return total_sum, fulfilled_sum

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_cart_"))
def view_cart(call):
    client_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('''
        SELECT posts.description, posts.price, reservations.is_fulfilled
        FROM reservations
        JOIN posts ON reservations.post_id = posts.id
        WHERE reservations.user_id = (SELECT user_id FROM clients WHERE id = ?)
    ''', (client_id,))
    cart_items = cursor.fetchall()
    conn.close()

    if cart_items:
        total_sum = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–µ–π —Å—É–º–º—ã
        response = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (ID: {client_id}):\n\n"
        for idx, (description, price, is_fulfilled) in enumerate(cart_items, start=1):
            status = "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–æ" if is_fulfilled else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            item_total = float(price)  # –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            response += f"{idx}. {description}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
            total_sum += item_total

        response += f"üßæ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum} ‚ÇΩ"
        bot.send_message(call.message.chat.id, response)
    else:
        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_fulfilled_"))
def mark_fulfilled(call):
    reservation_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –±—Ä–æ–Ω–∏

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    cursor.execute('UPDATE reservations SET is_fulfilled = 1 WHERE id = ?', (reservation_id,))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π.")
    bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
@bot.message_handler(commands=["manage_clients"])
def handle_manage_clients_command(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if role != "admin":
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é manage_clients
    manage_clients_v2(message)
def manage_clients_v2(message):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, name, phone, role FROM clients ORDER BY role DESC")  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
    clients = cursor.fetchall()
    conn.close()

    if clients:
        for client in clients:
            client_id, name, phone, role = client
            info = f"üë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüÜî –†–æ–ª—å: {role}"

            markup = InlineKeyboardMarkup()
            if role != "worker":
                set_worker_button = InlineKeyboardButton("üë∑ –ù–∞–∑–Ω–∞—á–∏—Ç—å worker", callback_data=f"set_worker_{client_id}")
                markup.add(set_worker_button)

            if role != "client":  # –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–±—Ä–∞—Ç—å —Ä–æ–ª—å worker
                set_client_button = InlineKeyboardButton("üö´ –£–±—Ä–∞—Ç—å —Ä–æ–ª—å worker",
                                                         callback_data=f"set_client_{client_id}")
                markup.add(set_client_button)

            bot.send_message(message.chat.id, info, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

@bot.callback_query_handler(
    func=lambda call: call.data.startswith("set_worker_") or call.data.startswith("set_client_"))
def handle_set_role(call):
    client_id = int(call.data.split("_")[2])
    new_role = "worker" if "set_worker" in call.data else "client"

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE clients SET role = ? WHERE id = ?", (new_role, client_id))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
    bot.send_message(call.message.chat.id, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {client_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}.")

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    role = get_user_role(user_id)
    return role == "admin"

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_client_"))
def handle_edit_client(call):
    client_id = int(call.data.split("_")[2])
    temp_user_data[call.from_user.id] = {"client_id": client_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞

    # –í—ã–≤–æ–¥–∏–º –≤—ã–±–æ—Ä, —á—Ç–æ –º–µ–Ω—è—Ç—å
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")
    )
    bot.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ (–∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
@bot.callback_query_handler(func=lambda call: call.data in ["edit_name", "edit_phone"])
def handle_edit_choice(call):
    user_id = call.from_user.id

    if call.data == "edit_name":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        set_user_state(user_id, "EDITING_NAME")
    elif call.data == "edit_phone":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        set_user_state(user_id, "EDITING_PHONE")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) in ["EDITING_NAME", "EDITING_PHONE"])
def update_client_data(message):
    state = get_user_state(message.chat.id)
    client_id = temp_user_data[message.chat.id]["client_id"]
    new_value = message.text

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    if state == "EDITING_NAME":
        cursor.execute("UPDATE clients SET name = ? WHERE id = ?", (new_value, client_id))
    elif state == "EDITING_PHONE":
        cursor.execute("UPDATE clients SET phone = ? WHERE id = ?", (new_value, client_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    clear_user_state(message.chat.id)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_client_"))
def handle_delete_client(call):
    client_id = int(call.data.split("_")[2])

    # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM clients WHERE id = ?", (client_id,))
    conn.commit()
    conn.close()

    bot.send_message(call.message.chat.id, f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")


# –ù–æ–≤—ã–π –ø–æ—Å—Ç
@bot.message_handler(func=lambda message: message.text == "‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")
def create_new_post(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    if role not in ["worker", "admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞."
    )
    temp_post_data[message.chat.id] = {}
    set_user_state(message.chat.id, UserState.CREATING_POST)

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.chat.id
    role = get_user_role(user_id)
    state = get_user_state(message.chat.id)
    if role not in ["worker", "admin"]:
        bot.send_message(user_id, "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        return
    if state == UserState.CREATING_POST:
        temp_post_data[message.chat.id]["photo"] = message.photo[-1].file_id
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.CREATING_POST)
def handle_post_details(message):
    chat_id = message.chat.id
    if "photo" in temp_post_data[chat_id] and "price" not in temp_post_data[chat_id]:
        if not message.text.isdigit():
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        temp_post_data[chat_id]["price"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    elif "price" in temp_post_data[chat_id] and "description" not in temp_post_data[chat_id]:
        temp_post_data[chat_id]["description"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")
    elif "description" in temp_post_data[chat_id] and "quantity" not in temp_post_data[chat_id]:
        if not message.text.isdigit():
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        temp_post_data[chat_id]["quantity"] = int(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        data = temp_post_data[chat_id]
        save_post(chat_id, data["photo"], data["price"], data["description"], data["quantity"])
        bot.send_message(chat_id, "–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        clear_user_state(chat_id)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
@bot.message_handler(func=lambda message: message.text == "üìÑ –ü–æ—Å—Ç—ã")
def manage_posts(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if role not in ["admin", "worker"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ—Å—Ç–æ–≤
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, photo, price, description, quantity FROM posts WHERE is_sent = 0')
        posts = cursor.fetchall()
        conn.close()
    except sqlite3.Error as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not posts:
        bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ
    for post in posts:
        # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_id, photo, price, description, quantity = post

        # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
        markup = InlineKeyboardMarkup()
        edit_btn = InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}")
        delete_btn = InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post_id}")
        markup.add(edit_btn, delete_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –∞–¥–º–∏–Ω—É
        try:
            # –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
            if photo:
                bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=f"**–ü–æ—Å—Ç #{post_id}:**\n"
                            f"üìç *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                            f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                            f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}",
                    parse_mode="Markdown",
                    reply_markup=markup
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                bot.send_message(
                    chat_id=user_id,
                    text=f"**–ü–æ—Å—Ç #{post_id}:**\n"
                         f"üìç *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                         f"üí∞ *–¶–µ–Ω–∞:* {price}\n"
                         f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}",
                    parse_mode="Markdown",
                    reply_markup=markup
                )
        except Exception as e:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ #{post_id}: {e}")

def get_reserved_count():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
        SELECT SUM(posts.quantity - (SELECT COUNT(*) 
                                     FROM reservations 
                                     WHERE reservations.post_id = posts.id))
        FROM posts
    ''')
    count = cursor.fetchone()[0] or 0  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    conn.close()
    return count

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
def show_reserved_items(message):
    reserved_count = get_reserved_count()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    bot.send_message(message.chat.id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {reserved_count}")

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    markup = admin_main_menu()
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda message: message.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª")
def send_new_posts_to_channel(message):
    user_id = message.chat.id
    role = get_user_role(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–æ–≤
    if role not in ["admin"]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_first_name = message.chat.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª
    cursor.execute('SELECT id, photo, price, description, quantity FROM posts WHERE is_sent = 0')
    posts = cursor.fetchall()

    if posts:
        for post in posts:
            post_id, photo, price, description, quantity = post
            caption = f"–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Å—Ç–∞—Ç–æ–∫: {quantity}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            markup = InlineKeyboardMarkup()
            reserve_btn = InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{post_id}")
            to_bot_button = InlineKeyboardButton("–í –±–æ—Ç–∞", url="https://t.me/MegaSkidkiTgBot?start=start")
            markup.add(reserve_btn, to_bot_button)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
            sent_message = bot.send_photo(CHANNEL_ID, photo=photo, caption=caption, reply_markup=markup)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            group_caption = f"–ü–æ—Å—Ç –±—ã–ª –≤—ã–ª–æ–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_first_name}\n\n{caption}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É (–±–µ–∑ –∫–Ω–æ–ø–∫–∏)
            bot.send_photo(-1002330057848, photo=photo, caption=group_caption)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
            cursor.execute('UPDATE posts SET is_sent = 1, message_id = ? WHERE id = ?',
                           (sent_message.message_id, post_id))
            conn.commit()

        bot.send_message(user_id, f"‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã ({len(posts)}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É.")
    else:
        bot.send_message(user_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

    conn.close()

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_NAME)
def register_name(message):
    user_id = message.chat.id
    temp_user_data[user_id]["name"] = message.text
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    set_user_state(user_id, UserState.REGISTERING_PHONE)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reserve_"))
def handle_reservation(call):
    post_id = int(call.data.split("_")[1])
    user_id = call.from_user.id

    if not is_registered(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–Ω—è—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –í –±–æ—Ç–∞",
            show_alert=True  # –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–∫–Ω–∞
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.send_message(user_id, f"–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä —Å ID {post_id}.")
        bot.send_message(
            ADMIN_CHAT_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç {post_id}."
        )

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.REGISTERING_PHONE)
def register_phone(message):
    user_id = message.chat.id
    phone = message.text
    name = temp_user_data[user_id]["name"]

    register_client(user_id, name, phone)
    bot.send_message(user_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.")
    bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}, —Ç–µ–ª–µ—Ñ–æ–Ω {phone}, —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.")
    clear_user_state(user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_post_"))
def edit_post(call):
    post_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    role = get_user_role(user_id)
    if role not in ["admin", "worker"]:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            show_alert=True
        )
        return

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_post_data[user_id] = {"post_id": post_id}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    message_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ—Å—Ç–∞:"
    if call.message.text:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text
        )
    else:
        msg_sent = bot.send_message(chat_id=call.message.chat.id, text=message_text)
        temp_post_data[user_id]["bot_message_id"] = msg_sent.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, UserState.EDITING_POST)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_post_"))
def edit_post(call):
    post_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    role = get_user_role(user_id)
    if role not in ["admin", "worker"]:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            show_alert=True
        )
        return

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_post_data[user_id] = {"post_id": post_id}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    message_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ—Å—Ç–∞:"
    if call.message.text:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text
        )
    else:
        msg_sent = bot.send_message(chat_id=call.message.chat.id, text=message_text)
        temp_post_data[user_id]["bot_message_id"] = msg_sent.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_state(user_id, UserState.EDITING_POST)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.EDITING_POST)
def edit_post_details(message):
    user_id = message.chat.id
    post_id = temp_post_data[user_id].get("post_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞
    if "last_message_id" in temp_post_data[user_id]:
        try:
            bot.delete_message(chat_id=user_id, message_id=temp_post_data[user_id]["last_message_id"])
        except Exception as e:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    if "bot_message_id" in temp_post_data[user_id]:
        try:
            bot.delete_message(chat_id=user_id, message_id=temp_post_data[user_id]["bot_message_id"])
        except Exception as e:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –µ—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
    if "price" not in temp_post_data[user_id]:
        if not message.text.isdigit():
            error_msg = bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            temp_post_data[user_id]["bot_message_id"] = error_msg.message_id
            return
        temp_post_data[user_id]["price"] = message.text
        msg = bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.")
        temp_post_data[user_id]["bot_message_id"] = msg.message_id
        temp_post_data[user_id]["last_message_id"] = message.message_id

    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤–≤–µ–¥–µ–Ω–∞, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ—Ç
    elif "description" not in temp_post_data[user_id]:
        temp_post_data[user_id]["description"] = message.text
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")
        temp_post_data[user_id]["bot_message_id"] = msg.message_id
        temp_post_data[user_id]["last_message_id"] = message.message_id

    # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ, –Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—â—ë –Ω–µ—Ç
    elif "quantity" not in temp_post_data[user_id]:
        if not message.text.isdigit():
            error_msg = bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            temp_post_data[user_id]["bot_message_id"] = error_msg.message_id
            return
        temp_post_data[user_id]["quantity"] = int(message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        data = temp_post_data[user_id]
        update_post(post_id, data["price"], data["description"], data["quantity"])

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
        confirmation_msg = bot.send_message(user_id, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        temp_post_data[user_id]["bot_message_id"] = confirmation_msg.message_id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del temp_post_data[user_id]
        clear_user_state(user_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
    #pizdec